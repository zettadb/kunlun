--
-- CREATE SEQUENCE
--
drop table if exists serialTest1 cascade;
psql:sql/sequence_noalter.sql:4: NOTICE:  table "serialtest1" does not exist, skipping
DROP TABLE
drop table if exists serialTest2 cascade;
psql:sql/sequence_noalter.sql:5: NOTICE:  table "serialtest2" does not exist, skipping
DROP TABLE
-- various error cases
CREATE UNLOGGED SEQUENCE sequence_testx;
psql:sql/sequence_noalter.sql:7: ERROR:  unlogged sequences are not supported
CREATE SEQUENCE sequence_testx INCREMENT BY 0;
psql:sql/sequence_noalter.sql:8: ERROR:  INCREMENT must not be zero
CREATE SEQUENCE sequence_testx INCREMENT BY -1 MINVALUE 20;
psql:sql/sequence_noalter.sql:9: ERROR:  MINVALUE (20) must be less than MAXVALUE (-1)
CREATE SEQUENCE sequence_testx INCREMENT BY 1 MAXVALUE -20;
psql:sql/sequence_noalter.sql:10: ERROR:  MINVALUE (1) must be less than MAXVALUE (-20)
CREATE SEQUENCE sequence_testx INCREMENT BY -1 START 10;
psql:sql/sequence_noalter.sql:11: ERROR:  START value (10) cannot be greater than MAXVALUE (-1)
CREATE SEQUENCE sequence_testx INCREMENT BY 1 START -10;
psql:sql/sequence_noalter.sql:12: ERROR:  START value (-10) cannot be less than MINVALUE (1)
CREATE SEQUENCE sequence_testx CACHE 0;
psql:sql/sequence_noalter.sql:13: ERROR:  CACHE (0) must be greater than zero
-- OWNED BY errors
CREATE SEQUENCE sequence_testx OWNED BY nobody;  -- nonsense word
psql:sql/sequence_noalter.sql:16: ERROR:  invalid OWNED BY option
HINT:  Specify OWNED BY table.column or OWNED BY NONE.
CREATE SEQUENCE sequence_testx OWNED BY pg_class_oid_index.oid;  -- not a table
psql:sql/sequence_noalter.sql:17: ERROR:  referenced relation "pg_class_oid_index" is not a table or foreign table
CREATE SEQUENCE sequence_testx OWNED BY pg_class.relname;  -- not same schema
psql:sql/sequence_noalter.sql:18: ERROR:  sequence must have same owner as table it is linked to
CREATE TABLE sequence_test_table (a int primary key);
CREATE TABLE
CREATE SEQUENCE sequence_testx OWNED BY sequence_test_table.b;  -- wrong column
psql:sql/sequence_noalter.sql:20: ERROR:  column "b" of relation "sequence_test_table" does not exist
DROP TABLE sequence_test_table;
DROP TABLE
-- sequence data types
CREATE SEQUENCE sequence_test5 AS integer;
psql:sql/sequence_noalter.sql:24: ERROR:  relation "sequence_test5" already exists
CREATE SEQUENCE sequence_test6 AS smallint;
psql:sql/sequence_noalter.sql:25: ERROR:  relation "sequence_test6" already exists
CREATE SEQUENCE sequence_test7 AS bigint;
psql:sql/sequence_noalter.sql:26: ERROR:  relation "sequence_test7" already exists
CREATE SEQUENCE sequence_test8 AS integer MAXVALUE 100000;
psql:sql/sequence_noalter.sql:27: ERROR:  relation "sequence_test8" already exists
CREATE SEQUENCE sequence_test9 AS integer INCREMENT BY -1;
psql:sql/sequence_noalter.sql:28: ERROR:  relation "sequence_test9" already exists
CREATE SEQUENCE sequence_test10 AS integer MINVALUE -100000 START 1;
psql:sql/sequence_noalter.sql:29: ERROR:  relation "sequence_test10" already exists
CREATE SEQUENCE sequence_test11 AS smallint;
psql:sql/sequence_noalter.sql:30: ERROR:  relation "sequence_test11" already exists
CREATE SEQUENCE sequence_test12 AS smallint INCREMENT -1;
psql:sql/sequence_noalter.sql:31: ERROR:  relation "sequence_test12" already exists
CREATE SEQUENCE sequence_test13 AS smallint MINVALUE -32768;
psql:sql/sequence_noalter.sql:32: ERROR:  relation "sequence_test13" already exists
CREATE SEQUENCE sequence_test14 AS smallint MAXVALUE 32767 INCREMENT -1;
psql:sql/sequence_noalter.sql:33: ERROR:  relation "sequence_test14" already exists
CREATE SEQUENCE sequence_testx AS text;
psql:sql/sequence_noalter.sql:34: ERROR:  sequence type must be smallint, integer, or bigint
CREATE SEQUENCE sequence_testx AS nosuchtype;
psql:sql/sequence_noalter.sql:35: ERROR:  type "nosuchtype" does not exist
LINE 1: CREATE SEQUENCE sequence_testx AS nosuchtype;
                                          ^
CREATE SEQUENCE sequence_testx AS smallint MAXVALUE 100000;
psql:sql/sequence_noalter.sql:37: ERROR:  MAXVALUE (100000) is out of range for sequence data type smallint
CREATE SEQUENCE sequence_testx AS smallint MINVALUE -100000;
psql:sql/sequence_noalter.sql:38: ERROR:  MINVALUE (-100000) is out of range for sequence data type smallint
---
--- test creation of SERIAL column
---
CREATE TABLE serialTest1 (f1 text, f2 serial primary key);
CREATE TABLE
INSERT INTO serialTest1 VALUES ('foo');
INSERT 0 1
INSERT INTO serialTest1 VALUES ('bar');
INSERT 0 1
INSERT INTO serialTest1 VALUES ('force', 100);
INSERT 0 1
INSERT INTO serialTest1 VALUES ('wrong', NULL);
psql:sql/sequence_noalter.sql:49: ERROR:  null value in column "f2" violates not-null constraint
DETAIL:  Failing row contains (wrong, null).
SELECT * FROM serialTest1;
  f1   | f2  
-------+-----
 foo   |   1
 bar   |   2
 force | 100
(3 rows)

SELECT pg_get_serial_sequence('serialTest1', 'f2');
  pg_get_serial_sequence   
---------------------------
 public.serialtest1_f2_seq
(1 row)

-- test smallserial / bigserial
CREATE TABLE serialTest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
  f5 bigserial, f6 serial8 primary key);
CREATE TABLE
INSERT INTO serialTest2 (f1)
  VALUES ('test_defaults');
INSERT 0 1
INSERT INTO serialTest2 (f1, f2, f3, f4, f5, f6)
  VALUES ('test_max_vals', 2147483647, 32767, 32767, 9223372036854775807,
          9223372036854775807),
         ('test_min_vals', -2147483648, -32768, -32768, -9223372036854775808,
          -9223372036854775808);
INSERT 0 2
-- All these INSERTs should fail:
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', -32769);
psql:sql/sequence_noalter.sql:70: ERROR:  smallint out of range
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', -32769);
psql:sql/sequence_noalter.sql:73: ERROR:  smallint out of range
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', 32768);
psql:sql/sequence_noalter.sql:76: ERROR:  smallint out of range
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', 32768);
psql:sql/sequence_noalter.sql:79: ERROR:  smallint out of range
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', -9223372036854775809);
psql:sql/sequence_noalter.sql:82: ERROR:  bigint out of range
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', -9223372036854775809);
psql:sql/sequence_noalter.sql:85: ERROR:  bigint out of range
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', 9223372036854775808);
psql:sql/sequence_noalter.sql:88: ERROR:  bigint out of range
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', 9223372036854775808);
psql:sql/sequence_noalter.sql:91: ERROR:  bigint out of range
SELECT * FROM serialTest2 ORDER BY f2 ASC;
      f1       |     f2      |   f3   |   f4   |          f5          |          f6          
---------------+-------------+--------+--------+----------------------+----------------------
 test_min_vals | -2147483648 | -32768 | -32768 | -9223372036854775808 | -9223372036854775808
 test_defaults |           1 |      1 |      1 |                    1 |                    1
 test_max_vals |  2147483647 |  32767 |  32767 |  9223372036854775807 |  9223372036854775807
(3 rows)

SELECT nextval('serialTest2_f2_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f3_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f4_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f5_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f6_seq');
 nextval 
---------
       2
(1 row)

-- basic sequence operations using both text and oid references
CREATE SEQUENCE sequence_test;
CREATE SEQUENCE
CREATE SEQUENCE IF NOT EXISTS sequence_test;
psql:sql/sequence_noalter.sql:103: NOTICE:  relation "sequence_test" already exists, skipping
CREATE SEQUENCE
SELECT nextval('sequence_test'::text);
 nextval 
---------
       1
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
       2
(1 row)

SELECT currval('sequence_test'::text);
 currval 
---------
       2
(1 row)

SELECT currval('sequence_test'::regclass);
 currval 
---------
       2
(1 row)

SELECT setval('sequence_test'::text, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::text, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      99
(1 row)

SELECT setval('sequence_test'::regclass, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::regclass, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      99
(1 row)

DISCARD SEQUENCES;
DISCARD SEQUENCES
SELECT currval('sequence_test'::regclass);
psql:sql/sequence_noalter.sql:118: ERROR:  currval of sequence "sequence_test" is not yet defined in this session
DROP SEQUENCE sequence_test;
DROP SEQUENCE
-- renaming sequences
CREATE SEQUENCE foo_seq_new;
CREATE SEQUENCE
SELECT nextval('foo_seq_new');
 nextval 
---------
       1
(1 row)

DROP SEQUENCE foo_seq_new;
DROP SEQUENCE
--
-- Check dependencies of serial and ordinary sequences
--
CREATE TEMP SEQUENCE myseq2;
CREATE SEQUENCE
CREATE TEMP SEQUENCE myseq3;
CREATE SEQUENCE
CREATE TEMP TABLE t1 (
  f1 serial,
  f2 int DEFAULT nextval('myseq2'),
  f3 int DEFAULT nextval('myseq3'::text)
);
CREATE TABLE
-- Both drops should fail, but with different error messages:
DROP SEQUENCE t1_f1_seq;
psql:sql/sequence_noalter.sql:139: ERROR:  cannot drop sequence t1_f1_seq because other objects depend on it
DETAIL:  default value for column f1 of table t1 depends on sequence t1_f1_seq
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP SEQUENCE myseq2;
psql:sql/sequence_noalter.sql:140: ERROR:  cannot drop sequence myseq2 because other objects depend on it
DETAIL:  default value for column f2 of table t1 depends on sequence myseq2
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- This however will work:
DROP SEQUENCE myseq3;
DROP SEQUENCE
DROP TABLE t1;
DROP TABLE
-- Fails because no longer existent:
DROP SEQUENCE t1_f1_seq;
psql:sql/sequence_noalter.sql:145: ERROR:  sequence "t1_f1_seq" does not exist
-- Now OK:
DROP SEQUENCE myseq2;
DROP SEQUENCE
CREATE SEQUENCE sequence_test2 START WITH 32;
psql:sql/sequence_noalter.sql:150: ERROR:  relation "sequence_test2" already exists
CREATE SEQUENCE sequence_test4 INCREMENT BY -1;
psql:sql/sequence_noalter.sql:151: ERROR:  relation "sequence_test4" already exists
CREATE SEQUENCE sequence_test3;  -- not read from, to test is_called
psql:sql/sequence_noalter.sql:152: ERROR:  relation "sequence_test3" already exists
-- Information schema
SELECT * FROM information_schema.sequences
  WHERE sequence_name ~ ANY(ARRAY['sequence_test', 'serialtest'])
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema |   sequence_name    | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value |    minimum_value     |    maximum_value    | increment | cycle_option 
------------------+-----------------+--------------------+-----------+-------------------+-------------------------+---------------+-------------+----------------------+---------------------+-----------+--------------
 regress          | public          | sequence_test10    | smallint  |                16 |                       2 |             0 | 1           | -20000               | 32767               | 1         | NO
 regress          | public          | sequence_test11    | integer   |                32 |                       2 |             0 | 1           | 1                    | 2147483647          | 1         | NO
 regress          | public          | sequence_test12    | integer   |                32 |                       2 |             0 | -1          | -2147483648          | -1                  | -1        | NO
 regress          | public          | sequence_test13    | integer   |                32 |                       2 |             0 | -32768      | -2147483648          | 2147483647          | 1         | NO
 regress          | public          | sequence_test14    | integer   |                32 |                       2 |             0 | 32767       | -2147483648          | 2147483647          | -1        | NO
 regress          | public          | sequence_test2     | bigint    |                64 |                       2 |             0 | 32          | 5                    | 36                  | 4         | YES
 regress          | public          | sequence_test3     | bigint    |                64 |                       2 |             0 | 1           | 1                    | 9223372036854775807 | 1         | NO
 regress          | public          | sequence_test4     | bigint    |                64 |                       2 |             0 | -1          | -9223372036854775808 | -1                  | -1        | NO
 regress          | public          | sequence_test5     | smallint  |                16 |                       2 |             0 | 1           | 1                    | 32767               | 1         | NO
 regress          | public          | sequence_test6     | smallint  |                16 |                       2 |             0 | 1           | 1                    | 32767               | 1         | NO
 regress          | public          | sequence_test7     | bigint    |                64 |                       2 |             0 | 1           | 1                    | 9223372036854775807 | 1         | NO
 regress          | public          | sequence_test8     | smallint  |                16 |                       2 |             0 | 1           | 1                    | 20000               | 1         | NO
 regress          | public          | sequence_test9     | smallint  |                16 |                       2 |             0 | -1          | -32768               | -1                  | -1        | NO
 regress          | public          | serialtest1_f2_seq | integer   |                32 |                       2 |             0 | 1           | 1                    | 2147483647          | 1         | NO
 regress          | public          | serialtest2_f2_seq | integer   |                32 |                       2 |             0 | 1           | 1                    | 2147483647          | 1         | NO
 regress          | public          | serialtest2_f3_seq | smallint  |                16 |                       2 |             0 | 1           | 1                    | 32767               | 1         | NO
 regress          | public          | serialtest2_f4_seq | smallint  |                16 |                       2 |             0 | 1           | 1                    | 32767               | 1         | NO
 regress          | public          | serialtest2_f5_seq | bigint    |                64 |                       2 |             0 | 1           | 1                    | 9223372036854775807 | 1         | NO
 regress          | public          | serialtest2_f6_seq | bigint    |                64 |                       2 |             0 | 1           | 1                    | 9223372036854775807 | 1         | NO
(19 rows)

SELECT schemaname, sequencename, start_value, min_value, max_value, increment_by, cycle, cache_size, last_value
FROM pg_sequences
WHERE sequencename ~ ANY(ARRAY['sequence_test', 'serialtest'])
  ORDER BY sequencename ASC;
 schemaname |    sequencename    | start_value |      min_value       |      max_value      | increment_by | cycle | cache_size | last_value 
------------+--------------------+-------------+----------------------+---------------------+--------------+-------+------------+------------
 public     | sequence_test10    |           1 |               -20000 |               32767 |            1 | f     |          1 |           
 public     | sequence_test11    |           1 |                    1 |          2147483647 |            1 | f     |          1 |           
 public     | sequence_test12    |          -1 |          -2147483648 |                  -1 |           -1 | f     |          1 |           
 public     | sequence_test13    |      -32768 |          -2147483648 |          2147483647 |            1 | f     |          1 |           
 public     | sequence_test14    |       32767 |          -2147483648 |          2147483647 |           -1 | f     |          1 |           
 public     | sequence_test2     |          32 |                    5 |                  36 |            4 | t     |          1 |        -36
 public     | sequence_test3     |           1 |                    1 | 9223372036854775807 |            1 | f     |          1 |           
 public     | sequence_test4     |          -1 | -9223372036854775808 |                  -1 |           -1 | f     |          1 |       -100
 public     | sequence_test5     |           1 |                    1 |               32767 |            1 | f     |          1 |           
 public     | sequence_test6     |           1 |                    1 |               32767 |            1 | f     |          1 |           
 public     | sequence_test7     |           1 |                    1 | 9223372036854775807 |            1 | f     |          1 |           
 public     | sequence_test8     |           1 |                    1 |               20000 |            1 | f     |          1 |           
 public     | sequence_test9     |          -1 |               -32768 |                  -1 |           -1 | f     |          1 |           
 public     | serialtest1_f2_seq |           1 |                    1 |          2147483647 |            1 | f     |          1 |        100
 public     | serialtest2_f2_seq |           1 |                    1 |          2147483647 |            1 | f     |          1 |        100
 public     | serialtest2_f3_seq |           1 |                    1 |               32767 |            1 | f     |          1 |        100
 public     | serialtest2_f4_seq |           1 |                    1 |               32767 |            1 | f     |          1 |        100
 public     | serialtest2_f5_seq |           1 |                    1 | 9223372036854775807 |            1 | f     |          1 |        100
 public     | serialtest2_f6_seq |           1 |                    1 | 9223372036854775807 |            1 | f     |          1 |        100
(19 rows)

SELECT * FROM pg_sequence_parameters('sequence_test4'::regclass);
 start_value |    minimum_value     | maximum_value | increment | cycle_option | cache_size | data_type 
-------------+----------------------+---------------+-----------+--------------+------------+-----------
          -1 | -9223372036854775808 |            -1 |        -1 | f            |          1 |        20
(1 row)

\d sequence_test4
                       Sequence "public.sequence_test4"
  Type  | Start |       Minimum        | Maximum | Increment | Cycles? | Cache 
--------+-------+----------------------+---------+-----------+---------+-------
 bigint |    -1 | -9223372036854775808 |      -1 |        -1 | no      |     1

\d serialtest2_f2_seq
                 Sequence "public.serialtest2_f2_seq"
  Type   | Start | Minimum |  Maximum   | Increment | Cycles? | Cache 
---------+-------+---------+------------+-----------+---------+-------
 integer |     1 |       1 | 2147483647 |         1 | no      |     1
Owned by: public.serialtest2.f2

-- Test comments
COMMENT ON SEQUENCE asdf IS 'won''t work';
psql:sql/sequence_noalter.sql:174: ERROR:  relation "asdf" does not exist
COMMENT ON SEQUENCE sequence_test2 IS 'will work';
COMMENT
COMMENT ON SEQUENCE sequence_test2 IS NULL;
COMMENT
-- Test lastval()
CREATE SEQUENCE seq;
CREATE SEQUENCE
SELECT nextval('seq');
 nextval 
---------
       1
(1 row)

SELECT lastval();
 lastval 
---------
       1
(1 row)

SELECT setval('seq', 99);
 setval 
--------
     99
(1 row)

SELECT lastval();
 lastval 
---------
      99
(1 row)

DISCARD SEQUENCES;
DISCARD SEQUENCES
SELECT lastval();
psql:sql/sequence_noalter.sql:185: ERROR:  lastval is not yet defined in this session
CREATE SEQUENCE seq2;
CREATE SEQUENCE
SELECT nextval('seq2');
 nextval 
---------
       1
(1 row)

SELECT lastval();
 lastval 
---------
       1
(1 row)

DROP SEQUENCE seq2;
DROP SEQUENCE
-- should fail
SELECT lastval();
psql:sql/sequence_noalter.sql:193: ERROR:  lastval is not yet defined in this session
CREATE USER regress_seq_user;
CREATE ROLE
-- Test sequences in read-only transactions
CREATE TEMPORARY SEQUENCE sequence_test_temp1;
CREATE SEQUENCE
START TRANSACTION READ ONLY;
START TRANSACTION
SELECT nextval('sequence_test_temp1');  -- ok
 nextval 
---------
       1
(1 row)

SELECT nextval('sequence_test2');  -- error
psql:sql/sequence_noalter.sql:201: ERROR:  cannot execute nextval() in a read-only transaction
ROLLBACK;
ROLLBACK
START TRANSACTION READ ONLY;
START TRANSACTION
SELECT setval('sequence_test_temp1', 1);  -- ok
 setval 
--------
      1
(1 row)

SELECT setval('sequence_test2', 1);  -- error
psql:sql/sequence_noalter.sql:205: ERROR:  cannot execute setval() in a read-only transaction
ROLLBACK;
ROLLBACK
-- privileges tests
-- nextval
CREATE SEQUENCE seq3;
CREATE SEQUENCE
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:214: ERROR:  permission denied for sequence seq3
GRANT SELECT ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:215: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:216: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:223: ERROR:  permission denied for sequence seq3
GRANT UPDATE ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:224: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:225: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:232: ERROR:  permission denied for sequence seq3
GRANT USAGE ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:233: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:234: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
-- currval
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:242: ERROR:  permission denied for sequence seq3
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:243: ERROR:  current transaction is aborted, commands ignored until end of transaction block
GRANT SELECT ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:244: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT currval('seq3');
psql:sql/sequence_noalter.sql:245: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:252: ERROR:  permission denied for sequence seq3
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:253: ERROR:  current transaction is aborted, commands ignored until end of transaction block
GRANT UPDATE ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:254: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT currval('seq3');
psql:sql/sequence_noalter.sql:255: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:262: ERROR:  permission denied for sequence seq3
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:263: ERROR:  current transaction is aborted, commands ignored until end of transaction block
GRANT USAGE ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:264: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT currval('seq3');
psql:sql/sequence_noalter.sql:265: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
-- lastval
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:273: ERROR:  permission denied for sequence seq3
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:274: ERROR:  current transaction is aborted, commands ignored until end of transaction block
GRANT SELECT ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:275: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT lastval();
psql:sql/sequence_noalter.sql:276: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:283: ERROR:  permission denied for sequence seq3
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:284: ERROR:  current transaction is aborted, commands ignored until end of transaction block
GRANT UPDATE ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:285: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT lastval();
psql:sql/sequence_noalter.sql:286: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:293: ERROR:  permission denied for sequence seq3
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:294: ERROR:  current transaction is aborted, commands ignored until end of transaction block
GRANT USAGE ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:295: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT lastval();
psql:sql/sequence_noalter.sql:296: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
CREATE SEQUENCE seq3;
CREATE SEQUENCE
-- setval
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION regress_seq_user;
SET
REVOKE ALL ON seq3 FROM regress_seq_user;
psql:sql/sequence_noalter.sql:304: ERROR:  permission denied for sequence seq3
SAVEPOINT save;
psql:sql/sequence_noalter.sql:305: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT setval('seq3', 5);
psql:sql/sequence_noalter.sql:306: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK TO save;
psql:sql/sequence_noalter.sql:307: ERROR:  savepoint "save" does not exist
GRANT UPDATE ON seq3 TO regress_seq_user;
psql:sql/sequence_noalter.sql:308: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT setval('seq3', 5);
psql:sql/sequence_noalter.sql:309: ERROR:  current transaction is aborted, commands ignored until end of transaction block
SELECT nextval('seq3');
psql:sql/sequence_noalter.sql:310: ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
ROLLBACK
DROP SEQUENCE seq3;
DROP SEQUENCE
-- Sequences should get wiped out as well:
DROP TABLE serialTest1;
DROP TABLE
DROP TABLE serialTest2;
DROP TABLE
-- Make sure sequences are gone:
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema | sequence_name  | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value | maximum_value | increment | cycle_option 
------------------+-----------------+----------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------+-----------+--------------
 regress          | public          | sequence_test2 | bigint    |                64 |                       2 |             0 | 32          | 5             | 36            | 4         | YES
(1 row)

  
DROP USER regress_seq_user;
DROP ROLE
DROP SEQUENCE seq;
DROP SEQUENCE
-- cache tests
CREATE SEQUENCE test_seq1 CACHE 10;
CREATE SEQUENCE
SELECT nextval('test_seq1');
 nextval 
---------
       1
(1 row)

SELECT nextval('test_seq1');
 nextval 
---------
       2
(1 row)

SELECT nextval('test_seq1');
 nextval 
---------
       3
(1 row)

DROP SEQUENCE test_seq1;
DROP SEQUENCE
create table tseq(a serial primary key, b int);
CREATE TABLE
insert into tseq(b) values(1),(2),(3);
INSERT 0 3
select*from tseq;
 a | b 
---+---
 1 | 1
 2 | 2
 3 | 3
(3 rows)

create table tseq3(a serial primary key, b smallserial, c bigserial);
CREATE TABLE
insert into tseq3(c) values(1),(2),(3);
INSERT 0 3
select*from tseq3;
 a | b | c 
---+---+---
 1 | 1 | 1
 2 | 2 | 2
 3 | 3 | 3
(3 rows)

CREATE TABLE itest8 (a int GENERATED ALWAYS AS IDENTITY primary key, b text, c bigserial);
CREATE TABLE
insert into itest8(b) values('1'),('abc2'),('def3');
INSERT 0 3
select*from itest8;
 a |  b   | c 
---+------+---
 1 | 1    | 1
 2 | abc2 | 2
 3 | def3 | 3
(3 rows)

create sequence seq2;
CREATE SEQUENCE
create table tseq2(a serial primary key, b smallserial, c bigserial, d int, e int generated by default as identity, f int default nextval('seq2')) partition by hash(a);
CREATE TABLE
create table tseq21 partition of tseq2 for values with (modulus 4, remainder 0);
CREATE TABLE
create table tseq22 partition of tseq2 for values with (modulus 4, remainder 1);
CREATE TABLE
create table tseq23 partition of tseq2 for values with (modulus 4, remainder 2);
CREATE TABLE
create table tseq24 partition of tseq2 for values with (modulus 4, remainder 3);
CREATE TABLE
insert into tseq2(e, f) values(default, default),(34, default),(default, default),(45, default);
INSERT 0 4
select*from tseq2;
 a | b | c | d | e  | f 
---+---+---+---+----+---
 1 | 1 | 1 |   |  1 | 1
 3 | 3 | 3 |   |  2 | 3
 2 | 2 | 2 |   | 34 | 2
 4 | 4 | 4 |   | 45 | 4
(4 rows)

insert into tseq2(e) values(11),(default),(33),(default);
INSERT 0 4
select*from tseq2;
 a | b | c | d | e  | f 
---+---+---+---+----+---
 1 | 1 | 1 |   |  1 | 1
 3 | 3 | 3 |   |  2 | 3
 5 | 5 | 5 |   | 11 | 5
 8 | 8 | 8 |   |  4 | 8
 2 | 2 | 2 |   | 34 | 2
 4 | 4 | 4 |   | 45 | 4
 6 | 6 | 6 |   |  3 | 6
 7 | 7 | 7 |   | 33 | 7
(8 rows)

insert into tseq2(f) values(111),(default),(333),(default);
INSERT 0 4
select*from tseq2;
 a  | b  | c  | d | e  |  f  
----+----+----+---+----+-----
  1 |  1 |  1 |   |  1 |   1
 12 | 12 | 12 |   |  8 |  10
  3 |  3 |  3 |   |  2 |   3
  5 |  5 |  5 |   | 11 |   5
  8 |  8 |  8 |   |  4 |   8
  9 |  9 |  9 |   |  5 | 111
 11 | 11 | 11 |   |  7 | 333
  2 |  2 |  2 |   | 34 |   2
  4 |  4 |  4 |   | 45 |   4
  6 |  6 |  6 |   |  3 |   6
  7 |  7 |  7 |   | 33 |   7
 10 | 10 | 10 |   |  6 |   9
(12 rows)

create table tseq1(a serial primary key, b smallserial, c bigserial, d int) partition by hash(a);
CREATE TABLE
create table tseq11 partition of tseq1 for values with (modulus 4, remainder 0);
CREATE TABLE
create table tseq12 partition of tseq1 for values with (modulus 4, remainder 1);
CREATE TABLE
create table tseq13 partition of tseq1 for values with (modulus 4, remainder 2);
CREATE TABLE
create table tseq14 partition of tseq1 for values with (modulus 4, remainder 3);
CREATE TABLE
insert into tseq1(d) values(1),(2),(3),(4), (5),(6),(7),(8);
INSERT 0 8
select*from tseq1;
 a | b | c | d 
---+---+---+---
 1 | 1 | 1 | 1
 3 | 3 | 3 | 3
 5 | 5 | 5 | 5
 8 | 8 | 8 | 8
 2 | 2 | 2 | 2
 4 | 4 | 4 | 4
 6 | 6 | 6 | 6
 7 | 7 | 7 | 7
(8 rows)

drop table tseq1;
DROP TABLE
drop table tseq2;
DROP TABLE
drop table itest8;
DROP TABLE
drop table tseq3;
DROP TABLE
drop table tseq;
DROP TABLE
drop sequence seq2;
DROP SEQUENCE
CREATE TABLE itest8 (a int GENERATED ALWAYS AS IDENTITY primary key, b text, c bigserial);
CREATE TABLE
create table tseq(a serial primary key, b int);
CREATE TABLE
create table tseq3(a serial primary key, b smallserial, c bigserial);
CREATE TABLE
create table tseq2(a serial primary key, b smallserial, c bigserial) partition by hash(a);
CREATE TABLE
create table tseq4(a serial primary key, b int generated always as identity, c bigserial);
CREATE TABLE
create table tseq5(a serial primary key, b int generated always as identity);
CREATE TABLE
create table tseq6(a serial primary key, b int);
CREATE TABLE
create table tseq1(a serial primary key, b smallserial, c bigserial) partition by hash(a);
CREATE TABLE
create table tseq11 partition of tseq1 for values with (modulus 4, remainder 0);
CREATE TABLE
create table tseq12 partition of tseq1 for values with (modulus 4, remainder 1);
CREATE TABLE
create table tseq13 partition of tseq1 for values with (modulus 4, remainder 2);
CREATE TABLE
create table tseq14 partition of tseq1 for values with (modulus 4, remainder 3);
CREATE TABLE
drop table tseq3;
DROP TABLE
drop table tseq;
DROP TABLE
drop table itest8;
DROP TABLE
drop table tseq2;
DROP TABLE
drop table tseq4;
DROP TABLE
drop table tseq5;
DROP TABLE
drop table tseq6;
DROP TABLE
drop table tseq1;
DROP TABLE
-- oracle sequence grammar
--create sequence seq34 nomaxvalue nominvalue nocache nocycle --noorder starts with 34;
--create sequence seq35 nomaxvalue nominvalue cache 1 no --cycle order starts with 35;
--select seq34.nextval;
--select seq35.currval;
--select seq35.nextval;
--select seq35.currval;
--drop sequence seq35;
--drop sequence seq34;
-- seq value fetch
create table t6(a int  primary key, b serial, c int generated by default as identity,d int);
CREATE TABLE
insert into t6(d) values(11),(22),(33);
psql:sql/sequence_noalter.sql:408: ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 1, 1, 11).
insert into t6(d) values(11),(22),(33);
psql:sql/sequence_noalter.sql:409: ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 2, 2, 11).
insert into t6(d) values(11),(22),(33);
psql:sql/sequence_noalter.sql:410: ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 3, 3, 11).
insert into t6(d) values(11),(22),(33);
psql:sql/sequence_noalter.sql:411: ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 4, 4, 11).
select*from t6;
 a | b | c | d 
---+---+---+---
(0 rows)

select currval('t6_a_seq');
psql:sql/sequence_noalter.sql:413: ERROR:  relation "t6_a_seq" does not exist
LINE 1: select currval('t6_a_seq');
                       ^
select currval('t6_b_seq');
 currval 
---------
       4
(1 row)

select nextval('t6_b_seq');
 nextval 
---------
       5
(1 row)

select currval('t6_c_seq');
 currval 
---------
       4
(1 row)

create sequence seq7;
CREATE SEQUENCE
create sequence seq6;
CREATE SEQUENCE
create sequence seq56;
CREATE SEQUENCE
create table t55(a serial primary key, b int default nextval('seq56') , c int);
CREATE TABLE
alter sequence seq56 owned by t55.b;
ALTER SEQUENCE
insert into t55(c) values(1),(2),(3);
INSERT 0 3
select*from t55;
 a | b | c 
---+---+---
 1 | 1 | 1
 2 | 2 | 2
 3 | 3 | 3
(3 rows)

drop table if exists t7;
DROP TABLE
create table t7(a int  primary key, b serial, c int generated by default as identity,d int default nextval('seq7'), e int);
CREATE TABLE
insert into t7 (e) values(11),(22),(33) returning *;
psql:sql/sequence_noalter.sql:429: ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 1, 1, 1, 11).
insert into t7 (e) values(11),(22),(33) returning *;
psql:sql/sequence_noalter.sql:430: ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 2, 2, 2, 11).
insert into t7 (e) values(11),(22),(33) returning *;
psql:sql/sequence_noalter.sql:431: ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 3, 3, 3, 11).
insert into t7 (e) vzalues(11),(22),(33) returning *;
psql:sql/sequence_noalter.sql:432: ERROR:  syntax error at or near "vzalues"
LINE 1: insert into t7 (e) vzalues(11),(22),(33) returning *;
                           ^
select*from t7;
 a | b | c | d | e 
---+---+---+---+---
(0 rows)

select currval('t7_a_seq');
psql:sql/sequence_noalter.sql:434: ERROR:  relation "t7_a_seq" does not exist
LINE 1: select currval('t7_a_seq');
                       ^
select currval('t7_b_seq');
 currval 
---------
       3
(1 row)

select currval('t7_c_seq');
 currval 
---------
       3
(1 row)

select currval('seq7');
 currval 
---------
       3
(1 row)

--select seq7.nextval, seq7.currval, seq7.nextval, --seq7.currval;
--select seq6.nextval, seq7.currval, seq7.nextval, seq6.currval;
--insert into t6(c,d) values(seq6.nextval, seq7.nextval),(seq6.nextval, seq7.nextval),(seq6.currval, seq7.currval);
--nsert into t6(c,d) values(seq6.nextval, seq7.nextval),(seq6.nextval, seq7.nextval),(seq6.currval, seq7.currval);
--insert into t6(c,d) values(seq6.nextval, seq7.nextval),(seq6.nextval, seq7.nextval),(seq6.currval, seq7.currval);
--insert into t6(c,d) values(seq6.currval, seq7.currval),(seq6.currval, seq7.currval),(seq6.nextval, seq7.nextval);
select*from t6;
 a | b | c | d 
---+---+---+---
(0 rows)

create schema scm1;
CREATE SCHEMA
alter sequence seq7 set schema scm1;
ALTER SEQUENCE
-- alter sequence scm1.seq7 rename to scm1.seq77;
-- above doesn't work, new name can't have schema name prepended.
-- below stmt rename a seq but doesn't move it to public schema, seq77 is still in scm1.
alter sequence scm1.seq7 rename to seq77;
ALTER SEQUENCE
--select scm1.seq77.nextval, scm1.seq77.currval;
select lastval();
 lastval 
---------
       3
(1 row)

drop schema scm1;
psql:sql/sequence_noalter.sql:456: ERROR:  cannot drop schema scm1 because other objects depend on it
DETAIL:  sequence scm1.seq77 depends on schema scm1
default value for column d of table t7 depends on sequence scm1.seq77
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
drop schema scm1 cascade;
psql:sql/sequence_noalter.sql:457: NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to sequence scm1.seq77
drop cascades to default value for column d of table t7
DROP SCHEMA
drop table t6;
DROP TABLE
drop table t7;
DROP TABLE
drop table t55;
DROP TABLE
drop sequence seq7;
psql:sql/sequence_noalter.sql:462: ERROR:  sequence "seq7" does not exist
drop sequence seq6;
DROP SEQUENCE
drop sequence seq56;
psql:sql/sequence_noalter.sql:464: ERROR:  sequence "seq56" does not exist
drop sequence sequence_test5;
DROP SEQUENCE
drop sequence sequence_test6;
DROP SEQUENCE
drop sequence sequence_test7;
DROP SEQUENCE
drop sequence sequence_test8;
DROP SEQUENCE
drop sequence sequence_test9;
DROP SEQUENCE
drop sequence sequence_test10;
DROP SEQUENCE
drop sequence sequence_test11;
DROP SEQUENCE
drop sequence sequence_test12;
DROP SEQUENCE
drop sequence sequence_test13;
DROP SEQUENCE
drop sequence sequence_test14;
DROP SEQUENCE
drop sequence sequence_test3;
DROP SEQUENCE
