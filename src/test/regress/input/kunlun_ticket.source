drop table if exists tenk1;
 CREATE TABLE tenk1 (
 unique1  int4,
 unique2  int4,
 two   int4,
 four  int4,
 ten   int4,
 twenty  int4,
 hundred  int4,
 thousand int4,
 twothousand int4,
 fivethous int4,
 tenthous int4,
 odd   int4,
 even  int4,
 stringu1 name,
 stringu2 name,
 string4  name
);
COPY tenk1 FROM '@abs_srcdir@/data/tenk.data';

select count(*) from tenk1;
drop table if exists FLOAT8_TBL;
CREATE TABLE FLOAT8_TBL(f1 float8);

INSERT INTO FLOAT8_TBL(f1) VALUES ('    0.0   ');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1004.30  ');
INSERT INTO FLOAT8_TBL(f1) VALUES ('   -34.84');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e+200');
INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e-200');

drop table if exists INT4_TBL;
CREATE TABLE INT4_TBL(f1 int4);
INSERT INTO INT4_TBL(f1) VALUES ('   0  ');
INSERT INTO INT4_TBL(f1) VALUES ('123456     ');
INSERT INTO INT4_TBL(f1) VALUES ('    -123456');


drop table if exists INT8_TBL cascade;
CREATE TABLE INT8_TBL(q1 int8, q2 int8);

INSERT INTO INT8_TBL VALUES('  123   ','  456');
INSERT INTO INT8_TBL VALUES('123   ','4567890123456789');
INSERT INTO INT8_TBL VALUES('4567890123456789','123');
INSERT INTO INT8_TBL VALUES(+4567890123456789,'4567890123456789');
INSERT INTO INT8_TBL VALUES('+4567890123456789','-4567890123456789');

-- ticket:38
drop table if exists base_tbl cascade;
CREATE TABLE base_tbl(a int, b varchar(50), c float);
INSERT INTO base_tbl VALUES (1, 'Row 1', 1.0);
CREATE VIEW rw_view1 AS SELECT * FROM base_tbl;
SELECT * FROM rw_view1 FOR UPDATE;

drop table base_tbl cascade;

-- ticket:162
drop table if exists t;
drop table if exists t1;
create table t(a int) with(engine=innodb);
create table t1(a int) with(engine=myrocks);
drop table t;
drop table t1;

-- ticket:644
drop table if exists t1;
create table t1(a int , b int );
insert into t1 values(1,2);
insert t1 values(3,4);
insert into t1 value(5,6);
insert into t1 values(7,8),(9,10);
insert into t1 value(11,12),(13,14);
insert t1 values(15,16),(17,18);
insert t1 value(19,20),(21,22);

REPLACE into t1 values(1,100);
REPLACE t1 values(3,200);
REPLACE t1 value(5,300);
REPLACE into t1 value(7,400),(9,500);
REPLACE t1 value(11,600),(13,700);
insert t1 value(2,99);

set @@sql_mode='TRADITIONAL';
-- mysql 报错 
update t1 set b=a/0 where a=2 returning *;


-- update ignore时，mysql忽略错误
update ignore t1 set b=a/0 where a=2 returning *;

-- 在计算节点常量表达时简化的过程中，仍然会报错，即便此时有update ignore
update ignore t1 set b=1/0 where a=2 returning *;

-- update 推荐用法
-- 用于忽略约束报错
create table t5(a int primary key, b int);
insert into t5 values(1,1), (2,2);
update ignore t5 set a=a+1 returning *;
select * from t5;

-- 使用限制 
-- 用于简单的可以直接下推的update语句
explain update ignore t5 set a=a+1 returning *;

explain update ignore t5 set a=a+1 where b in (select a from t1);

set @@sql_mode='STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';

-- ticket:760
drop table if exists t2;
create table t2 (f1 int not null primary key 
                 auto_increment, f2 varchar(255));

insert into t2 values (null,'b');

select * from t2;

drop table t2;


-- ticket:776
drop schema if exists `s 1` cascade;
create schema `s 1`;
set search_path="s 1";
create table `t 1` (`a 1` int auto_increment primary key, `a 2` int);
create table `t 2` (`a 1` int auto_increment primary key, `a 2` int);

alter table `t 1` add column `a 3` varchar(100);
create index `i 1` on `t 1`(`a 2`);
create index `i 2` on `t 1`(`a 3`);
drop index `i 1`, `i 2`;
alter table `t 1` alter column `a 3` type int using `a 3`::int;
alter table `t 1` drop column `a 3`;

insert into `t 1` (`a 2`) select generate_series(1, 100);
insert into `t 2` (`a 2`) select `a 1` from `t 1`;

explain analyze select * from `t 1` t1(a,b), `t 2` t2(a,b) where t1.a=t2.a;

insert into `t 1` values(1,1) on duplicate key update `a 2` = excluded.`a 2`;
update `t 1` set `a 2` = `a 1` + 10 where `a 1` = 1;
delete from `t 1` where `a 1` = 1;
update `t 1` set `a 2` = t.a from `t 2` as t(a, _) where t.a = `t 1`.`a 1`;

drop schema `s 1` cascade;
set search_path="public";

-- ticket:930
-- drop table if exists t;
-- create table t(a int auto_increment primary key,b int, c timestamptz on update current_timestamp);
-- insert into t(a,b) values(1,1);

-- select * from t;

-- 更新之后，时间自动更新
-- update t set b=b+1;
-- select * from t;


-- replace相当于delete + insert，所以不会变化
-- replace into t values(1,1);

-- select * from t;
-- 对insert .. on duplicate key update ... 同样有效
-- insert into t (a,b) values(1,1) on duplicate key update b=t.b+1;
-- select * from t;

-- drop table t;
-- ticket:944
DROP TABLE IF EXISTS t1;
CREATE TABLE  t1 (
  id int NOT NULL,
  t1_name varchar(255) DEFAULT NULL,
  sector_id int DEFAULT NULL,
  salary int DEFAULT NULL,
  PRIMARY KEY (id)
);

INSERT INTO t1 VALUES ('1', 'zhnagsan', '1', '10000');
INSERT INTO t1 VALUES ('2', 'lisi', '2', '13000');
INSERT INTO t1 VALUES ('3', 'wangwu', '2', '12000');
INSERT INTO t1 VALUES ('4', 'zhaoliu', '3', '12000');
INSERT INTO t1 VALUES ('5', '', '4', '18000');

DROP TABLE IF EXISTS t2;
CREATE TABLE t2 (
  id int NOT NULL,
  sector varchar(255) DEFAULT NULL,
  PRIMARY KEY (id)
) ;

INSERT INTO t2 VALUES ('1', '研发');
INSERT INTO t2 VALUES ('2', '财务');
INSERT INTO t2 VALUES ('3', '运维');
INSERT INTO t2 VALUES ('4', '安全');

select * from t1 FULL JOIN t2 on t1.sector_id=t2.id;

update t1 set t1_name='qiqi' from t2 where t1.sector_id=t2.id and sector='安全';
update t1 set t1_name='zhangsan' from t2 where t1.sector_id=t2.id and sector='研发';
update t1 set salary=15000 where sector_id in ( select id from t2 where sector='财务');
select * from t1 FULL JOIN t2 on t1.sector_id=t2.id;

-- 失败的
delete from t1 using t2 where t1.sector_id=t2.id and sector_id=1;

delete from t1 where sector_id in (select id from t2 where sector='安全');

drop table t1;
drop table t2;

-- ticket:945
drop table if exists t;
create table t(a int, b int) partition by range(a);
create table tp1 partition of t for values from (0) to (100);
create table tp2 partition of t for values from (100) to (200);

insert into t select i,i from generate_series(1,100) s(i);


-- 更新分区列（要求原表必须有主键） 失败
update t set a=200-a where a=50;

drop table if exists t;
create table t(a int primary key, b int) partition by range(a);
create table tp1 partition of t for values from (0) to (100);
create table tp2 partition of t for values from (100) to (200);

insert into t select i,i from generate_series(1,100) s(i);

-- 更新分区列（要求原表必须有主键）
update t set a=200-a where a=50;

drop table t;

-- ticket:992

show tables where tables='t1';
show databases where database='postgres';
show schemas where schemas='public';

-- ticket:1000
-- show table status;
-- show table status where name = 't1';
drop table t1;

-- ticket:972
drop  table if exists t1;

create table t1(a serial primary key, b int) partition by range(a);
create table t1p1 partition of t1 for values from (0) to (100);
create table t1p2 partition of t1 for values from (100) to (200);

create table t1p3 (b int, a int not null);
alter table t1 attach partition t1p3 for values from (200) to (300);

drop table t1;              


-- ticket:946
show create table tenk1;
update pg_class set reltuples=10000 where relname = 'tenk1';
 explain select count(*)
from
  (select t3.tenthous as x1, coalesce(t1.stringu1, t2.stringu1) as x2
   from tenk1 t1
   left join tenk1 t2 on t1.unique1 = t2.unique1
   join tenk1 t3 on t1.unique2 = t3.unique2) ss,
  tenk1 t4,
  tenk1 t5
where t4.thousand = t5.unique1 and ss.x1 = t4.tenthous and ss.x2 = t5.stringu1;


--ticket:291
select f1, (select min(unique1) from tenk1 where unique1 > f1) AS gt from int4_tbl;



--ticket:882

drop table if exists t2;
CREATE TABLE t2 (
    a integer AUTO_INCREMENT
);

INSERT INTO t2 VALUES (NULL);
-- ticket:842
drop table if exists t2;
create  table t2(a int );	
create index on t2(a);
drop index t2_a_idx; create index on t2(a);
 \d+ t2;
 
 
-- ticket:826
drop table if exists t1; 
create table t1(a int, b int, c int, d int);
create index on t1(a);
insert into t1 select generate_series(1,1000);
analyze t1;
explain select * from t1 where t1.a=1;
drop index t1_a_idx;
explain select * from t1 where t1.a=1;


-- ticket:908 单shard不做测试
-- drop table if exists t1,t2; 
-- create table t1(a int, b int) with(shard=1);
-- create table t2(a int, b int) with(shard=2);
-- create index on t1(a);
-- create index on t2(a);
-- 准备数据
-- insert into t1 select  random()*100, generate_series(1,100) % 10;
-- insert into t2 select generate_series(1,100), random()*100;
-- analyze t1, t2;
-- 禁止hash/merge join，以及物化优化
-- set enable_hashjoin =off;
-- set enable_mergejoin =off;
-- set enable_material =off;

-- 产生NestLoop JOIN执行计划
-- explain select * from t1, t2 where t1.b=t2.a and t1.a < 40;


-- ticket:881
select 'CREATE USER MAPPING FOR \"current_user\" SERVER sv2 OPTIONS (user ''\"current_user\"'')';


--ticket:900
drop table if exists t; 
create table t(a int auto_increment);
insert into t values(default), (default);
drop table t;


--ticket:895
drop table if exists t1; 
create table t1(a int, b varchar(10));
insert into t1 select 1, ' 01';

select a::text::float =b::float from t1;
drop table t1;


-- ticket:887
drop table if exists t1; 
create table t1(a int, b int);

insert into t1 values(1,0),(2,0),(3,0),(4,0),(5,0);

WITH t AS (UPDATE t1 SET b=b+1 limit 4 returning *)
SELECT *
FROM t limit 1;
select * from t1;


--ticket:332


CREATE SEQUENCE sequence_test2 START WITH 32; 	

ALTER SEQUENCE IF EXISTS sequence_test2 RESTART WITH 24
  INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;

SELECT nextval('sequence_test2');


--ticket:897
drop database abc;
create database abc；
create database if not exists abc;

--ticket:898

--SHOW DATABASES;
--SHOW SCHEMAS;
--SHOW TABLES;
--SHOW TABLES like 't1';
--show create table t1;
--SHOW PROCESSLIST;
--show errors;
--show warnings;


drop table if exists t6;
create temp table t6(a int primary key, b int unique);

replace into t6 values(1,1),(2,2);

--替换之前的数据
replace into t6 values(1,3),(2,6); 
drop table t6;

--ticket:827
drop table if exists t1,t2,t3;
create table t1(a int);
create table t2(a int);
create table t3(a int, b int);
insert into t1 values (1),(2);
insert into t2 values (3),(4);
insert into t3 values (1,1);
update t3 set (a,b) = ((select max(a) from t1), (select max(a) from t2));
drop table t1,t2,t3;

--ticket:574
drop table if exists t1;
create table t1 (a int PRIMARY KEY , b int not null,CONSTRAINT t1_b_key UNIQUE (b));

-- 违背唯一约束，不进行插入
insert ignore into t1(a,b) values (4,4);
	
insert ignore into t1(a,b) values (4,4);

insert into t1(a,b) values (3,3);
-- 等价的PG语法
insert into t1 values(3,3) on conflict do nothing;

-- 不忽略违背约束的错误（例如分区约束、非null约束）

insert ignore into t1(a,b) values (4,NULL); --error

-- insert on duplicate key update
-- 更新第一个冲突的元组
select * from t1;
insert into t1 values(3,4) on duplicate key update b=2;
select * from t1;

-- 等价的PG语法
insert into t1 values(3,3) on conflict do update set b=3;

--ticket:575
select * from t1;
replace into t1 values(3,4);

replace into t1 values(1,1),(1,2);
select * from t1;

create temp table t1(a int primary key, b int unique);
replace into t1 values(1,1),(1,2);

drop table t1;

--ticket:581
drop table if exists t3 cascade;
CREATE TABLE t3 (A INT PRIMARY KEY, B INT) PARTITION BY RANGE(a);
CREATE TABLE t3p1 PARTITION OF t3 FOR VALUES FROM (0) TO (100);
CREATE TABLE t3p2 PARTITION OF t3 FOR VALUES FROM (100) TO (200);
REPLACE INTO t3 SELECT GENERATE_SERIES(0,400) % 200, GENERATE_SERIES(0,400);

-- 分区表暂不支持全局有序的删除
UPDATE t3 SET b=-b ORDER BY a LIMIT 1; -- should be fail, global order is not supported
-- 支持不跨越分区的有序删除
UPDATE t3 SET b=-b WHERE a<100 ORDER BY a LIMIT 1 RETURNING *;
WITH foo as (UPDATE t3 SET b=-b WHERE b > 0 LIMIT 10 RETURNING *) SELECT count(1) FROM foo;
SELECT count(1) FROM t3 where b<0;

drop table t3;

--ticket:936
drop FUNCTION if exists f_leak;
select length(stringu1) from tenk1 group by length(stringu1);

CREATE FUNCTION f_leak (text)
       RETURNS bool LANGUAGE 'plpgsql' COST 0.0000001
       AS 'BEGIN RAISE NOTICE ''f_leak => %'', $1; RETURN true; END';
	   
drop table if exists customer cascade;   
CREATE TABLE customer (
       cid      int primary key,
       name     text not null,
       tel      text,
       passwd   text);
CREATE VIEW my_property_normal AS
       SELECT * FROM customer WHERE name = current_user;
	   
GRANT SELECT ON my_property_normal TO public;

SELECT * FROM my_property_normal WHERE f_leak(passwd);

drop table customer cascade;
drop FUNCTION f_leak;

--ticket:920
drop sequence if exists s1;
create sequence s1;
select * from s1;
drop sequence s1;

--ticket:932
drop table if exists temptest2 cascade;
begin;
CREATE TEMP TABLE temptest2(col int PRIMARY KEY) ON COMMIT DELETE ROWS;
insert into temptest2 values (1),(2);
select*from temptest2;
commit;
drop table temptest2;

-- ticket:109
drop table if exists tf1;
create table tf1(v float8);
insert into tf1 values(34.84);
select int4(v) from tf1;

drop table tf1;

-- ticket:93
select q1 | q2 from int8_tbl;
select q1 -- q2 from int8_tbl;
select ~q1 from int8_tbl;
select ~q2 from int8_tbl;

-- ticket:12

drop table if exists attmp;
CREATE TABLE attmp (initial int4);
ALTER TABLE attmp ADD COLUMN a int4 default 3;
ALTER TABLE attmp ADD COLUMN b name;
ALTER TABLE attmp ADD COLUMN c text;
ALTER TABLE attmp ADD COLUMN d float8;
ALTER TABLE attmp ADD COLUMN e float4;
CREATE INDEX attmp_idx ON attmp (a, (d + e), b);

drop table attmp;



-- ticket:82

drop table if exists bytea_test_table;
create table bytea_test_table(v bytea);
insert into bytea_test_table values(decode('ff','hex'));
select string_agg(v,'') from bytea_test_table;

drop table bytea_test_table;


-- ticket:130

drop table if exists list_parted cascade;
create table list_parted ( a text, b int) partition by list (lower(a));
create table part_ee_ff partition of list_parted for values in ('ee', 'ff') partition by range (b);
drop table list_parted;



-- ticket:49
drop table if exists ts1;
create table ts1(id int, info text);
select * from ts1 for share;
drop table ts1;

drop table if exists INT8_TBL cascade;
CREATE TABLE INT8_TBL(q1 int8, q2 int8);
create function extractq2(t int8_tbl) returns int8 as $$
select t.q2
$$ language sql immutable;

create function extractq2_2(t int8_tbl) returns table(ret1 int8) as $$
select extractq2(t) offset 0
$$ language sql immutable;
select x from int8_tbl, extractq2_2(int8_tbl) f(x);


--ticket:120
DROP SEQUENCE IF EXISTS sequence_test;
CREATE SEQUENCE sequence_test;
SELECT setval('sequence_test'::text, 99, false); -- this returns 99
SELECT nextval('sequence_test'::text); -- this should returns 99, but it returns 100
DROP SEQUENCE sequence_test;

--ticket:332
drop sequence  IF EXISTS sequence_test2;

CREATE SEQUENCE sequence_test2 START WITH 32; 	

ALTER SEQUENCE IF EXISTS sequence_test2 RESTART WITH 24
  INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;

SELECT nextval('sequence_test2'); -- this returns 24


ALTER SEQUENCE sequence_test2 RESTART WITH 32
NO CYCLE;


SELECT nextval('sequence_test2');
SELECT nextval('sequence_test2');
SELECT nextval('sequence_test2'); -- error

drop sequence sequence_test2;




--ticket:914

set enable_mergejoin = off, enable_hashjoin = off;
SET SESSION NET_READ_TIMEOUT= 86400, @@SESSION.NET_WRITE_TIMEOUT= 86400;
SET SESSION NET_READ_TIMEOUT= 86400, @@SESSION.NET_WRITE_TIMEOUT= 86400, enable_hashjoin = off;

--ticket:905 

CREATE DATABASE dbname TEMPLATE template0;


--ticket:901

drop table if exists t1;
create table t1(a int, b int);
    
begin;

insert into t1 values(1,1);

savepoint s1;

insert into t1 values(2,2);
insert into t1 values(2,2);

commit;
--ticket:991 
show variables where Variable_name='admin_port';
show variables where Value='1';

--ticket:998
drop table t;
create table t(a int , b int);
insert into t select generate_series(1,20),generate_series(20,39);
select * from t limit 10,2;
-- 等价于
select * from t limit 2 offset 10;

--ticket:999
explain select * from t order by a limit 2 offset 4;

drop table t;

--ticket:1016
DROP TABLE if exists prt1;
CREATE TABLE prt1 (a int, b int, c varchar) PARTITION BY RANGE(a);
DROP TABLE if exists prt1;
CREATE TABLE prt1 (a int, b int, c varchar) PARTITION BY RANGE(a);
CREATE TABLE prt1_p1 PARTITION OF prt1 FOR VALUES FROM (0) TO (250);
CREATE TABLE prt1_p3 PARTITION OF prt1 FOR VALUES FROM (500) TO (600);
CREATE TABLE prt1_p2 PARTITION OF prt1 FOR VALUES FROM (250) TO (500);
INSERT INTO prt1 SELECT i, i % 25, to_char(i, 'FM0000') FROM 
 generate_series(0, 599) i WHERE i % 2 = 0;
CREATE INDEX iprt1_p1_a on prt1_p1(a);
CREATE INDEX iprt1_p2_a on prt1_p2(a);
CREATE INDEX iprt1_p3_a on prt1_p3(a);

DROP TABLE if exists prt2;
CREATE TABLE prt2 (a int, b int, c varchar) PARTITION BY RANGE(b);
CREATE TABLE prt2_p1 PARTITION OF prt2 FOR VALUES FROM (0) TO (250);
CREATE TABLE prt2_p2 PARTITION OF prt2 FOR VALUES FROM (250) TO (500);
CREATE TABLE prt2_p3 PARTITION OF prt2 FOR VALUES FROM (500) TO (600);
INSERT INTO prt2 SELECT i % 25, i, to_char(i, 'FM0000') FROM 
 generate_series(0, 599) i WHERE i % 3 = 0;
CREATE INDEX iprt2_p1_b on prt2_p1(b);
CREATE INDEX iprt2_p2_b on prt2_p2(b);
CREATE INDEX iprt2_p3_b on prt2_p3(b);

analyze prt1;
analyze prt2;

EXPLAIN (COSTS OFF)
SELECT t1.a, t1.c, t2.b, t2.c FROM prt1 t1, prt2 t2
 WHERE t1.a = t2.b AND t2.a = 0 ORDER BY t1.a, t2.b limit 4;
 
drop table prt1 cascade;
drop table prt2 cascade;

--ticket:1030
drop table if exists t1;
create table t1(a int primary key, b int);
alter table t1 add column c int;
alter table t1 add column d int;
alter table t1 drop column c; -- 此时c列被drop，但仍然存在于系统表中

insert into t1 values(1,1,1);
-- 报错
insert into t1 values(1,1,1) on duplicate key update b = excluded.b;

-- 2、update 未考虑子表和父表列序不一致的问题
drop table if exists t2 cascade;
create table t2(a int, b int) partition by range(a);
create table t2p1 partition of t2 for values from (0) to (100);

create table t2p2 (b int, a int); -- 创建一个列序不同的子表
alter table t2 attach partition t2p2 for values from (100) to (200);

insert into t2 values(50, 50),(150, 150);
update t2 set b=b+100;
select * from t2; -- 可以观察到，t2p2错误地更新了列a

-- 3、不支持的查询，未报错
update t1 set b=b+1 where a in (select a from t2);
drop table t1;
drop table t2 cascade;

--ticket:1029
create schema pg_stmt;

create schema 12345;
create schema 模式;

create schema adc;
create schema adc;

create schema adc1;

create schema _adc1;

drop schema 模式;
drop schema adc;
drop schema adc1;
drop schema _adc1;




drop table tenk1;
drop table FLOAT8_TBL;
drop table INT4_TBL;
drop table INT8_TBL cascade;
