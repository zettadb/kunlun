--
-- PARALLEL
--
create function sp_parallel_restricted(int) returns int as
  $$begin return $1; end$$ language plpgsql parallel restricted;
CREATE FUNCTION
-- Serializable isolation would disable parallel query, so explicitly use an
-- arbitrary other level.
--begin isolation level repeatable read;
-- encourage use of parallel plans
set parallel_setup_cost=0;
SET
set parallel_tuple_cost=0;
SET
set min_parallel_table_scan_size=0;
SET
set max_parallel_workers_per_gather=4;
SET
-- Parallel Append with partial-subplans
explain (costs off)
  select round(avg(aa)), sum(aa) from a_star;

select round(avg(aa)), sum(aa) from a_star a1;
 round | sum 
-------+-----
     2 |   3
(1 row)

-- Parallel Append with both partial and non-partial subplans
-- Table *_star was not created in file create_table.sql
--alter table c_star set (parallel_workers = 0);
--alter table d_star set (parallel_workers = 0);
explain (costs off)
  select round(avg(aa)), sum(aa) from a_star;

select round(avg(aa)), sum(aa) from a_star a2;
 round | sum 
-------+-----
     2 |   3
(1 row)

-- Parallel Append with only non-partial subplans
--alter table a_star set (parallel_workers = 0);
--alter table b_star set (parallel_workers = 0);
--alter table e_star set (parallel_workers = 0);
--alter table f_star set (parallel_workers = 0);
explain (costs off)
  select round(avg(aa)), sum(aa) from a_star;

select round(avg(aa)), sum(aa) from a_star a3;
 round | sum 
-------+-----
     2 |   3
(1 row)

-- Disable Parallel Append
--alter table a_star reset (parallel_workers);
--alter table b_star reset (parallel_workers);
--alter table c_star reset (parallel_workers);
--alter table d_star reset (parallel_workers);
--alter table e_star reset (parallel_workers);
--alter table f_star reset (parallel_workers);
set enable_parallel_append to off;
SET
explain (costs off)
  select round(avg(aa)), sum(aa) from a_star;

select round(avg(aa)), sum(aa) from a_star a4;
 round | sum 
-------+-----
     2 |   3
(1 row)

reset enable_parallel_append;
RESET
-- Parallel Append that runs serially
create function sp_test_func() returns setof text as
$$ select 'foo'::varchar union all select 'bar'::varchar $$
language sql stable;
CREATE FUNCTION
select sp_test_func() order by 1;
 sp_test_func 
--------------
 bar
 foo
(2 rows)

-- Parallel Append is not to be used when the subpath depends on the outer param
create table part_pa_test(a int, b int) partition by range(a);
CREATE TABLE
create table part_pa_test_p1 partition of part_pa_test for values from (minvalue) to (0);
CREATE TABLE
create table part_pa_test_p2 partition of part_pa_test for values from (0) to (maxvalue);
CREATE TABLE
explain (costs off)
	select (select max((select pa1.b from part_pa_test pa1 where pa1.a = pa2.a)))
	from part_pa_test pa2;

drop table part_pa_test;
DROP TABLE
-- test with leader participation disabled
set parallel_leader_participation = off;
SET
explain (costs off)
  select count(*) from tenk1 where stringu1 = 'GRAAAA';

select count(*) from tenk1 where stringu1 = 'GRAAAA';
 count 
-------
    15
(1 row)

-- test with leader participation disabled, but no workers available (so
-- the leader will have to run the plan despite the setting)
set max_parallel_workers = 0;
SET
explain (costs off)
  select count(*) from tenk1 where stringu1 = 'GRAAAA';

select count(*) from tenk1 where stringu1 = 'GRAAAA';
 count 
-------
    15
(1 row)

reset max_parallel_workers;
RESET
reset parallel_leader_participation;
RESET
-- test that parallel_restricted function doesn't run in worker
--alter table tenk1 set (parallel_workers = 4);
explain (verbose, costs off)
select sp_parallel_restricted(unique1) from tenk1
  where stringu1 = 'GRAAAA' order by 1;

-- test parallel plan when group by expression is in target list.
explain (costs off)
	select length(stringu1) from tenk1 group by length(stringu1);

select length(stringu1) from tenk1 group by length(stringu1);
 length 
--------
      6
(1 row)

explain (costs off)
	select stringu1, count(*) from tenk1 group by stringu1 order by stringu1;

-- test that parallel plan for aggregates is not selected when
-- target list contains parallel restricted clause.
explain (costs off)
	select  sum(sp_parallel_restricted(unique1)) from tenk1
	group by(sp_parallel_restricted(unique1));

-- test prepared statement
prepare tenk1_count(integer) As select  count((unique1)) from tenk1 where hundred > $1;
PREPARE
explain (costs off) execute tenk1_count(1);

execute tenk1_count(1);
 count 
-------
  9800
(1 row)

deallocate tenk1_count;
DEALLOCATE
-- test parallel plans for queries containing un-correlated subplans.
--alter table tenk2 set (parallel_workers = 0);
explain (costs off)
	select count(*) from tenk1 where (two, four) not in
	(select hundred, thousand from tenk2 where thousand > 100);

select count(*) from tenk1 where (two, four) not in
	(select hundred, thousand from tenk2 where thousand > 100);
 count 
-------
 10000
(1 row)

-- this is not parallel-safe due to use of random() within SubLink's testexpr:
explain (costs off)
	select * from tenk1 where (unique1 + random())::integer not in
	(select ten from tenk2);

--alter table tenk2 reset (parallel_workers);
-- test parallel plan for a query containing initplan.
set enable_indexscan = off;
SET
set enable_indexonlyscan = off;
SET
set enable_bitmapscan = off;
SET
--alter table tenk2 set (parallel_workers = 2);
explain (costs off)
	select count(*) from tenk1
        where tenk1.unique1 = (Select max(tenk2.unique1) from tenk2);

select count(*) from tenk1
    where tenk1.unique1 = (Select max(tenk2.unique1) from tenk2);
 count 
-------
     0
(1 row)

reset enable_indexscan;
RESET
reset enable_indexonlyscan;
RESET
reset enable_bitmapscan;
RESET
--alter table tenk2 reset (parallel_workers);
-- test parallel index scans.
set enable_seqscan to off;
SET
set enable_bitmapscan to off;
SET
explain (costs off)
	select  count((unique1)) from tenk1 where hundred > 1;

select  count((unique1)) from tenk1 where hundred > 1;
 count 
-------
  9800
(1 row)

-- test parallel index-only scans.
explain (costs off)
	select  count(*) from tenk1 where thousand > 95;

select  count(*) from tenk1 where thousand > 95;
 count 
-------
  9040
(1 row)

-- test rescan cases too
set enable_material = false;
SET
explain (costs off)
select * from
  (select count(unique1) from tenk1 where hundred > 10) ss
  right join (values (1),(2),(3)) v(x) on true;

select * from
  (select count(unique1) from tenk1 where hundred > 10) ss
  right join (values (1),(2),(3)) v(x) on true;
 count | x 
-------+---
  8900 | 1
  8900 | 2
  8900 | 3
(3 rows)

explain (costs off)
select * from
  (select count(*) from tenk1 where thousand > 99) ss
  right join (values (1),(2),(3)) v(x) on true;

select * from
  (select count(*) from tenk1 where thousand > 99) ss
  right join (values (1),(2),(3)) v(x) on true;
 count | x 
-------+---
  9000 | 1
  9000 | 2
  9000 | 3
(3 rows)

reset enable_material;
RESET
reset enable_seqscan;
RESET
reset enable_bitmapscan;
RESET
-- test parallel bitmap heap scan.
set enable_seqscan to off;
SET
set enable_indexscan to off;
SET
set enable_hashjoin to off;
SET
set enable_mergejoin to off;
SET
set enable_material to off;
SET
-- test prefetching, if the platform allows it
DO $$
BEGIN
 SET effective_io_concurrency = 50;
EXCEPTION WHEN invalid_parameter_value THEN
END $$;
DO
set work_mem='64kB';  --set small work mem to force lossy pages
SET
explain (costs off)
	select count(*) from tenk1, tenk2 where tenk1.hundred > 1 and tenk2.thousand=0;

select count(*) from tenk1, tenk2 where tenk1.hundred > 1 and tenk2.thousand=0;
 count 
-------
     0
(1 row)

create table bmscantest (a int, t text);
CREATE TABLE
insert into bmscantest select r, 'fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo' FROM generate_series(1,100000) r;
INSERT 0 100000
create index i_bmtest ON bmscantest(a);
CREATE INDEX
select count(*) from bmscantest where a>1;
 count 
-------
 99999
(1 row)

-- test accumulation of stats for parallel nodes
reset enable_seqscan;
RESET
--alter table tenk2 set (parallel_workers = 0);
explain (analyze, timing off, summary off, costs off)
   select count(*) from tenk1, tenk2 where tenk1.hundred > 1
        and tenk2.thousand=0;

--alter table tenk2 reset (parallel_workers);
reset work_mem;
RESET
create function explain_parallel_sort_stats() returns setof text
language plpgsql as
$$
declare ln text;
begin
    for ln in
        explain (analyze, timing off, summary off, costs off)
          select * from
          (select ten from tenk1 where ten < 100 order by ten) ss
          right join (values (1),(2),(3)) v(x) on true
    loop
        ln = regexp_replace(ln, 'Memory: \S*',  'Memory: xxx');
        return next ln;
    end loop;
end;
$$;
CREATE FUNCTION
select * from explain_parallel_sort_stats();

reset enable_indexscan;
RESET
reset enable_hashjoin;
RESET
reset enable_mergejoin;
RESET
reset enable_material;
RESET
reset effective_io_concurrency;
RESET
drop table bmscantest;
DROP TABLE
drop function explain_parallel_sort_stats();
DROP FUNCTION
-- test parallel merge join path.
set enable_hashjoin to off;
SET
set enable_nestloop to off;
SET
explain (costs off)
	select  count(*) from tenk1, tenk2 where tenk1.unique1 = tenk2.unique1;

select  count(*) from tenk1, tenk2 where tenk1.unique1 = tenk2.unique1;
 count 
-------
     0
(1 row)

reset enable_hashjoin;
RESET
reset enable_nestloop;
RESET
-- test gather merge
set enable_hashagg = false;
SET
explain (costs off)
   select count(*) from tenk1 group by twenty;

select count(*) from tenk1 group by twenty;
 count 
-------
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
(20 rows)

--test expressions in targetlist are pushed down for gather merge
create function sp_simple_func(var1 integer) returns integer
as $$
begin
        return var1 + 10;
end;
$$ language plpgsql PARALLEL SAFE;
CREATE FUNCTION
explain (costs off, verbose)
    select ten, sp_simple_func(ten) from tenk1 where ten < 100 order by ten;	

drop function sp_simple_func(integer);
DROP FUNCTION
-- test handling of SRFs in targetlist (bug in 10.0)
explain (costs off)
   select count(*), generate_series(1,2) from tenk1 group by twenty;

select count(*), generate_series(1,2) from tenk1 group by twenty;
 count | generate_series 
-------+-----------------
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
   500 |               1
   500 |               2
(40 rows)

-- test gather merge with parallel leader participation disabled
set parallel_leader_participation = off;
SET
explain (costs off)
   select count(*) from tenk1 group by twenty;

select count(*) from tenk1 group by twenty;
 count 
-------
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
   500
(20 rows)

reset parallel_leader_participation;
RESET
--test rescan behavior of gather merge
set enable_material = false;
SET
explain (costs off)
select * from
  (select string4, count(unique2)
   from tenk1 group by string4 order by string4) ss
  right join (values (1),(2),(3)) v(x) on true;

select * from
  (select string4, count(unique2)
   from tenk1 group by string4 order by string4) ss
  right join (values (1),(2),(3)) v(x) on true;
 string4 | count | x 
---------+-------+---
 AAAAxx  |  2500 | 1
 HHHHxx  |  2500 | 1
 OOOOxx  |  2500 | 1
 VVVVxx  |  2500 | 1
 AAAAxx  |  2500 | 2
 HHHHxx  |  2500 | 2
 OOOOxx  |  2500 | 2
 VVVVxx  |  2500 | 2
 AAAAxx  |  2500 | 3
 HHHHxx  |  2500 | 3
 OOOOxx  |  2500 | 3
 VVVVxx  |  2500 | 3
(12 rows)

reset enable_material;
RESET
reset enable_hashagg;
RESET
-- check parallelized int8 aggregate (bug #14897)
explain (costs off)
select avg(unique1::int8) from tenk1;

select avg(unique1::int8) from tenk1;
          avg          
-----------------------
 4999.5000000000000000
(1 row)

-- gather merge test with a LIMIT
explain (costs off)
  select fivethous from tenk1 order by fivethous limit 4;

select fivethous from tenk1 order by fivethous limit 4;
 fivethous 
-----------
         0
         0
         1
         1
(4 rows)

-- gather merge test with 0 worker
set max_parallel_workers = 0;
SET
explain (costs off)
   select string4 from tenk1 order by string4 limit 5;

select string4 from tenk1 order by string4 limit 5;
 string4 
---------
 AAAAxx
 AAAAxx
 AAAAxx
 AAAAxx
 AAAAxx
(5 rows)

-- gather merge test with 0 workers, with parallel leader
-- participation disabled (the leader will have to run the plan
-- despite the setting)
set parallel_leader_participation = off;
SET
explain (costs off)
   select string4 from tenk1 order by string4 limit 5;

select string4 from tenk1 order by string4 limit 5;
 string4 
---------
 AAAAxx
 AAAAxx
 AAAAxx
 AAAAxx
 AAAAxx
(5 rows)

reset parallel_leader_participation;
RESET
reset max_parallel_workers;
RESET
SAVEPOINT settings;
psql:sql/select_parallel.sql:328: ERROR:  SAVEPOINT can only be used in transaction blocks
SET LOCAL force_parallel_mode = 1;
psql:sql/select_parallel.sql:329: WARNING:  SET LOCAL can only be used in transaction blocks
SET
explain (costs off)
  select stringu1::int2 from tenk1 where unique1 = 1;

--ROLLBACK TO SAVEPOINT settings;
-- exercise record typmod remapping between backends
CREATE FUNCTION make_record(n int)
  RETURNS RECORD LANGUAGE plpgsql PARALLEL SAFE AS
$$
BEGIN
  RETURN CASE n
           WHEN 1 THEN ROW(1)
           WHEN 2 THEN ROW(1, 2)
           WHEN 3 THEN ROW(1, 2, 3)
           WHEN 4 THEN ROW(1, 2, 3, 4)
           ELSE ROW(1, 2, 3, 4, 5)
         END;
END;
$$;
CREATE FUNCTION
SAVEPOINT settings;
psql:sql/select_parallel.sql:348: ERROR:  SAVEPOINT can only be used in transaction blocks
SET LOCAL force_parallel_mode = 1;
psql:sql/select_parallel.sql:349: WARNING:  SET LOCAL can only be used in transaction blocks
SET
SELECT make_record(x) FROM (SELECT generate_series(1, 5) x) ss ORDER BY x;
 make_record 
-------------
 (1)
 (1,2)
 (1,2,3)
 (1,2,3,4)
 (1,2,3,4,5)
(5 rows)

--ROLLBACK TO SAVEPOINT settings;
DROP function make_record(n int);
DROP FUNCTION
-- test the sanity of parallel query after the active role is dropped.
drop role if exists regress_parallel_worker;
psql:sql/select_parallel.sql:355: NOTICE:  role "regress_parallel_worker" does not exist, skipping
DROP ROLE
create role regress_parallel_worker;
CREATE ROLE
set role regress_parallel_worker;
SET
reset session authorization;
RESET
drop role regress_parallel_worker;
DROP ROLE
set force_parallel_mode = 1;
SET
select count(*) from tenk1;
 count 
-------
 10000
(1 row)

reset force_parallel_mode;
RESET
reset role;
RESET
-- Window function calculation can't be pushed to workers.
explain (costs off, verbose)
  select count(*) from tenk1 a where (unique1, two) in
    (select unique1, row_number() over() from tenk1 b);

-- LIMIT/OFFSET within sub-selects can't be pushed to workers.
explain (costs off)
  select * from tenk1 a where two in
    (select two from tenk1 b where stringu1 like '%AAAA' limit 3);

-- to increase the parallel query test coverage
SAVEPOINT settings;
psql:sql/select_parallel.sql:377: ERROR:  SAVEPOINT can only be used in transaction blocks
SET LOCAL force_parallel_mode = 1;
psql:sql/select_parallel.sql:378: WARNING:  SET LOCAL can only be used in transaction blocks
SET
EXPLAIN (analyze, timing off, summary off, costs off) SELECT * FROM tenk1;

--ROLLBACK TO SAVEPOINT settings;
-- provoke error in worker
SAVEPOINT settings;
psql:sql/select_parallel.sql:383: ERROR:  SAVEPOINT can only be used in transaction blocks
SET LOCAL force_parallel_mode = 1;
psql:sql/select_parallel.sql:384: WARNING:  SET LOCAL can only be used in transaction blocks
SET
select stringu1::int2 from tenk1 where unique1 = 1;
psql:sql/select_parallel.sql:385: ERROR:  invalid input syntax for integer: "BAAAAA"
--ROLLBACK TO SAVEPOINT settings;
-- test interaction with set-returning functions
SAVEPOINT settings;
psql:sql/select_parallel.sql:389: ERROR:  SAVEPOINT can only be used in transaction blocks
-- multiple subqueries under a single Gather node
-- must set parallel_setup_cost > 0 to discourage multiple Gather nodes
SET LOCAL parallel_setup_cost = 10;
psql:sql/select_parallel.sql:393: WARNING:  SET LOCAL can only be used in transaction blocks
SET
EXPLAIN (COSTS OFF)
SELECT unique1 FROM tenk1 WHERE fivethous = tenthous + 1
UNION ALL
SELECT unique1 FROM tenk1 WHERE fivethous = tenthous + 1;

--ROLLBACK TO SAVEPOINT settings;
-- can't use multiple subqueries under a single Gather node due to initPlans
EXPLAIN (COSTS OFF)
SELECT unique1 FROM tenk1 WHERE fivethous =
	(SELECT unique1 FROM tenk1 WHERE fivethous = 1 LIMIT 1)
UNION ALL
SELECT unique1 FROM tenk1 WHERE fivethous =
	(SELECT unique2 FROM tenk1 WHERE fivethous = 1 LIMIT 1)
ORDER BY 1;

-- test interaction with SRFs
SELECT * FROM information_schema.foreign_data_wrapper_options
ORDER BY 1, 2, 3;
 foreign_data_wrapper_catalog | foreign_data_wrapper_name | option_name | option_value 
------------------------------+---------------------------+-------------+--------------
(0 rows)

-- test passing expanded-value representations to workers
CREATE FUNCTION make_some_array(int,int) returns int[] as
$$declare x int[];
  begin
    x[1] = $1;
    x[2] = $2;
    return x;
  end$$ language plpgsql parallel safe;
CREATE FUNCTION
CREATE TABLE fooarr(f1 text, f2 int[], f3 text);
psql:sql/select_parallel.sql:421: ERROR:  Kunlun-db: Not supported type (1007).
INSERT INTO fooarr VALUES('1', ARRAY[1,2], 'one');
psql:sql/select_parallel.sql:422: ERROR:  relation "fooarr" does not exist
LINE 1: INSERT INTO fooarr VALUES('1', ARRAY[1,2], 'one');
                    ^
PREPARE pstmt(text, int[]) AS SELECT * FROM fooarr WHERE f1 = $1 AND f2 = $2;
psql:sql/select_parallel.sql:424: ERROR:  relation "fooarr" does not exist
LINE 1: PREPARE pstmt(text, int[]) AS SELECT * FROM fooarr WHERE f1 ...
                                                    ^
EXPLAIN (COSTS OFF) EXECUTE pstmt('1', make_some_array(1,2));
psql:sql/select_parallel.sql:425: ERROR:  prepared statement "pstmt" does not exist
EXECUTE pstmt('1', make_some_array(1,2));
psql:sql/select_parallel.sql:426: ERROR:  prepared statement "pstmt" does not exist
DEALLOCATE pstmt;
psql:sql/select_parallel.sql:427: ERROR:  prepared statement "pstmt" does not exist
-- test interaction between subquery and partial_paths
SET LOCAL min_parallel_table_scan_size TO 0;
psql:sql/select_parallel.sql:430: WARNING:  SET LOCAL can only be used in transaction blocks
SET
CREATE VIEW tenk1_vw_sec WITH (security_barrier) AS SELECT * FROM tenk1;
CREATE VIEW
EXPLAIN (COSTS OFF)
SELECT 1 FROM tenk1_vw_sec WHERE EXISTS (SELECT 1 WHERE unique1 = 0);

--rollback;
drop function sp_parallel_restricted(int);
DROP FUNCTION
drop function sp_test_func();
DROP FUNCTION
drop FUNCTION make_some_array;
DROP FUNCTION
drop TABLE fooarr;
psql:sql/select_parallel.sql:439: ERROR:  table "fooarr" does not exist
drop view tenk1_vw_sec;
DROP VIEW
