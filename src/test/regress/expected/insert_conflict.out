--
-- insert...on conflict do unique index inference
--
drop table if exists insertconflicttest;
psql:sql/insert_conflict.sql:4: NOTICE:  table "insertconflicttest" does not exist, skipping
DROP TABLE
create table insertconflicttest(key1 int4, fruit text);
CREATE TABLE
--
-- Test unique index inference with operator class specifications and
-- named collations
--
-- fails
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (key1) do nothing;
psql:sql/insert_conflict.sql:12: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (fruit) do nothing;
psql:sql/insert_conflict.sql:13: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- succeeds
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (key1, fruit) do nothing;
psql:sql/insert_conflict.sql:16: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (fruit, key1, fruit, key1) do nothing;
psql:sql/insert_conflict.sql:17: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (lower(fruit), key1, lower(fruit), key1) do nothing;
psql:sql/insert_conflict.sql:18: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (key1, fruit) do update set fruit = excluded.fruit
  where exists (select 1 from insertconflicttest ii where ii.key1 = excluded.key1);
psql:sql/insert_conflict.sql:20: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- Neither collation nor operator class specifications are required --
-- supplying them merely *limits* matches to indexes with matching opclasses
-- used for relevant indexes
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (key1, fruit ) do nothing;
psql:sql/insert_conflict.sql:24: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- does not appear.
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (key1, fruit) do nothing;
psql:sql/insert_conflict.sql:26: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- Okay, but only accepts the single index where both opclass and collation are
-- specified
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (fruit, key1) do nothing;
psql:sql/insert_conflict.sql:29: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- Okay, but only accepts the single index where both opclass and collation are
-- specified (plus expression variant)
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (lower(fruit), key1, key1) do nothing;
psql:sql/insert_conflict.sql:32: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- Attribute appears twice, while not all attributes/expressions on attributes
-- appearing within index definition match in terms of both opclass and
-- collation.
--
-- Works because every attribute in inference specification needs to be
-- satisfied once or more by cataloged index attribute, and as always when an
-- attribute in the cataloged definition has a non-default opclass/collation,
-- it still satisfied some inference attribute lacking any particular
-- opclass/collation specification.
--
-- The implementation is liberal in accepting inference specifications on the
-- assumption that multiple inferred unique indexes will prevent problematic
-- cases.  It rolls with unique indexes where attributes redundantly appear
-- multiple times, too (which is not tested here).
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (fruit, key1, fruit , key1) do nothing;
psql:sql/insert_conflict.sql:47: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (lower(fruit), key1, key1) do nothing;
psql:sql/insert_conflict.sql:48: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- fails:
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (lower(fruit) , upper(fruit)) do nothing;
psql:sql/insert_conflict.sql:52: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- works:
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (lower(fruit), upper(fruit) ) do nothing;
psql:sql/insert_conflict.sql:54: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--
-- Single key tests
--
create unique index key_index on insertconflicttest(key1);
CREATE INDEX
--
-- Explain tests
--
explain (costs off) insert into insertconflicttest values (0, 'Bilberry') on conflict (key1) do update set fruit = excluded.fruit;

-- Should display qual actually attributable to internal sequential scan:
explain (costs off) insert into insertconflicttest values (0, 'Bilberry') on conflict (key1) do update set fruit = excluded.fruit where insertconflicttest.fruit != 'Cawesh';
psql:sql/insert_conflict.sql:66: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- With EXCLUDED.* expression in scan node:
explain (costs off) insert into insertconflicttest values(0, 'Crowberry') on conflict (key1) do update set fruit = excluded.fruit where excluded.fruit != 'Elderberry';
psql:sql/insert_conflict.sql:68: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- Does the same, but JSON format shows "Conflict Arbiter Index" as JSON array:
explain (costs off, format json) insert into insertconflicttest values (0, 'Bilberry') on conflict (key1) do update set fruit = excluded.fruit where insertconflicttest.fruit != 'Lime' returning *;
psql:sql/insert_conflict.sql:70: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- Fails (no unique index inference specification, required for do update variant):
insert into insertconflicttest values (1, 'Apple') on conflict do update set fruit = excluded.fruit;
INSERT 0 1
-- inference succeeds:
insert into insertconflicttest values (1, 'Apple') on conflict (key1) do update set fruit = excluded.fruit;
INSERT 0 0
insert into insertconflicttest values (2, 'Orange') on conflict (key1, key1, key1) do update set fruit = excluded.fruit;
INSERT 0 1
-- Succeed, since multi-assignment does not involve subquery:
insert into insertconflicttest
values (1, 'Apple'), (2, 'Orange')
on conflict (key1) do update set (fruit, key1) = (excluded.fruit, excluded.key1);
INSERT 0 0
-- Give good diagnostic message when EXCLUDED.* spuriously referenced from
-- RETURNING:
insert into insertconflicttest values (1, 'Apple') on conflict (key1) do update set fruit = excluded.fruit RETURNING excluded.fruit;
psql:sql/insert_conflict.sql:86: ERROR:  invalid reference to FROM-clause entry for table "excluded"
LINE 1: ...1) do update set fruit = excluded.fruit RETURNING excluded.f...
                                                             ^
HINT:  There is an entry for table "excluded", but it cannot be referenced from this part of the query.
-- Only suggest <table>.* column when inference element misspelled:
insert into insertconflicttest values (1, 'Apple') on conflict (keyy1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:89: ERROR:  column "keyy1" does not exist
LINE 1: ...nsertconflicttest values (1, 'Apple') on conflict (keyy1) do...
                                                             ^
HINT:  Perhaps you meant to reference the column "insertconflicttest.key1".
-- Have useful HINT for EXCLUDED.* RTE within UPDATE:
insert into insertconflicttest values (1, 'Apple') on conflict (key1) do update set fruit = excluded.fruitt;
psql:sql/insert_conflict.sql:92: ERROR:  column excluded.fruitt does not exist
LINE 1: ...'Apple') on conflict (key1) do update set fruit = excluded.f...
                                                             ^
HINT:  Perhaps you meant to reference the column "excluded.fruit".
-- inference fails:
insert into insertconflicttest values (3, 'Kiwi') on conflict (key1, fruit) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:95: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (4, 'Mango') on conflict (fruit, key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:96: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (5, 'Lemon') on conflict (fruit) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:97: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (6, 'Passionfruit') on conflict (lower(fruit)) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:98: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- Check the target relation can be aliased
insert into insertconflicttest AS ict values (6, 'Passionfruit') on conflict (key1) do update set fruit = excluded.fruit; -- ok, no reference to target table
INSERT 0 1
insert into insertconflicttest AS ict values (6, 'Passionfruit') on conflict (key1) do update set fruit = ict.fruit; -- ok, alias
INSERT 0 0
insert into insertconflicttest AS ict values (6, 'Passionfruit') on conflict (key1) do update set fruit = insertconflicttest.fruit; -- error, references aliased away name
psql:sql/insert_conflict.sql:103: ERROR:  invalid reference to FROM-clause entry for table "insertconflicttest"
LINE 1: ...nfruit') on conflict (key1) do update set fruit = insertconf...
                                                             ^
HINT:  Perhaps you meant to reference the table alias "ict".
drop index key_index;
DROP INDEX
--
-- Composite key tests
--
-- inference succeeds:
insert into insertconflicttest values (7, 'Raspberry') on conflict (key1, fruit) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:111: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (8, 'Lime') on conflict (fruit, key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:112: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- inference fails:
insert into insertconflicttest values (9, 'Banana') on conflict (key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:115: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (10, 'Blueberry') on conflict (key1, key1, key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:116: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (11, 'Cherry') on conflict (key1, lower(fruit)) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:117: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (12, 'Date') on conflict (lower(fruit), key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:118: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- inference fails:
insert into insertconflicttest values (13, 'Grape') on conflict (key1, fruit) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:121: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (14, 'Raisin') on conflict (fruit, key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:122: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (15, 'Cranberry') on conflict (key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:123: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (16, 'Melon') on conflict (key1, key1, key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:124: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (17, 'Mulberry') on conflict (key1, lower(fruit)) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:125: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (18, 'Pineapple') on conflict (lower(fruit), key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:126: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- inference succeeds:
insert into insertconflicttest values (20, 'Quince') on conflict (lower(fruit)) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:129: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (21, 'Pomegranate') on conflict (lower(fruit), lower(fruit)) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:130: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- inference fails:
insert into insertconflicttest values (22, 'Apricot') on conflict (upper(fruit)) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:133: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (23, 'Blackberry') on conflict (fruit) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:134: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- inference succeeds:
insert into insertconflicttest values (24, 'Plum') on conflict (key1, lower(fruit)) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:137: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (25, 'Peach') on conflict (lower(fruit), key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:138: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- Should not infer "tricky_expr_comp_key_index" index:
explain (costs off) insert into insertconflicttest values (26, 'Fig') on conflict (lower(fruit), key1, lower(fruit), key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:140: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- inference fails:
insert into insertconflicttest values (27, 'Prune') on conflict (key1, upper(fruit)) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:143: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (28, 'Redcurrant') on conflict (fruit, key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:144: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (29, 'Nectarine') on conflict (key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:145: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--
-- Non-spurious duplicate violation tests
--
create unique index key_index on insertconflicttest(key1);
CREATE INDEX
-- succeeds, since UPDATE happens to update "fruit" to existing value:
insert into insertconflicttest values (26, 'Fig') on conflict (key1) do update set fruit = excluded.fruit;
INSERT 0 1
-- fails, since UPDATE is to row with key value 26, and we're updating "fruit"
-- to a value that happens to exist in another row ('peach'):
insert into insertconflicttest values (26, 'Peach') on conflict (key1) do update set fruit = excluded.fruit;
INSERT 0 2
-- succeeds, since "key" isn't repeated/referenced in UPDATE, and "fruit"
-- arbitrates that statement updates existing "Fig" row:
insert into insertconflicttest values (25, 'Fig') on conflict (fruit) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:159: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
drop index key_index;
DROP INDEX
-- Succeeds
insert into insertconflicttest values (23, 'Blackberry') on conflict (key1) where fruit like '%berry' do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:164: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (23, 'Blackberry') on conflict (key1) where fruit like '%berry' and fruit = 'inconsequential' do nothing;
psql:sql/insert_conflict.sql:165: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- fails
insert into insertconflicttest values (23, 'Blackberry') on conflict (key1) do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:168: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (23, 'Blackberry') on conflict (key1) where fruit like '%berry' or fruit = 'consequential' do nothing;
psql:sql/insert_conflict.sql:169: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflicttest values (23, 'Blackberry') on conflict (fruit) where fruit like '%berry' do update set fruit = excluded.fruit;
psql:sql/insert_conflict.sql:170: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
--
-- Test that wholerow references to ON CONFLICT's EXCLUDED work
--
create unique index plain on insertconflicttest(key1);
CREATE INDEX
-- Succeeds, updates existing row:
insert into insertconflicttest as i values (23, 'Jackfruit') on conflict (key1) do update set fruit = excluded.fruit
  where i.* != excluded.* returning *;
psql:sql/insert_conflict.sql:179: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- No update this time, though:
insert into insertconflicttest as i values (23, 'Jackfruit') on conflict (key1) do update set fruit = excluded.fruit
  where i.* != excluded.* returning *;
psql:sql/insert_conflict.sql:182: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- Predicate changed to require match rather than non-match, so updates once more:
insert into insertconflicttest as i values (23, 'Jackfruit') on conflict (key1) do update set fruit = excluded.fruit
  where i.* = excluded.* returning *;
psql:sql/insert_conflict.sql:185: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- Assign:
insert into insertconflicttest as i values (23, 'Avocado') on conflict (key1) do update set fruit = excluded.*::text
  returning *;
psql:sql/insert_conflict.sql:188: ERROR:  Kunlun-db: The on conflict action cannot be serialized
-- deparse whole row var in WHERE and SET clauses:
explain (costs off) insert into insertconflicttest as i values (23, 'Avocado') on conflict (key1) do update set fruit = excluded.fruit where excluded.* is null;
psql:sql/insert_conflict.sql:190: ERROR:  Kunlun-db: On conflict action do not support where clause.
explain (costs off) insert into insertconflicttest as i values (23, 'Avocado') on conflict (key1) do update set fruit = excluded.*::text;
psql:sql/insert_conflict.sql:191: ERROR:  Kunlun-db: The on conflict action cannot be serialized
drop index plain;
DROP INDEX
-- Cleanup
drop table insertconflicttest;
DROP TABLE
--
-- Previous tests all managed to not test any expressions requiring
-- planner preprocessing ...
--
create table insertconflict (a bigint, b bigint);
CREATE TABLE
-- computing column index is not suported
-- create unique index insertconflicti1 on insertconflict(coalesce(a, 0));
insert into insertconflict values (1, 2)
on conflict (coalesce(a, 0)) do nothing;
psql:sql/insert_conflict.sql:209: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflict values (1, 2)
on conflict (b) where coalesce(a, 1) > 0 do nothing;
psql:sql/insert_conflict.sql:212: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into insertconflict values (1, 2)
on conflict (b) where coalesce(a, 1) > 1 do nothing;
psql:sql/insert_conflict.sql:215: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
drop table insertconflict;
DROP TABLE
--
-- test insertion through view
-- not support on conflict clause ,so comment it currently.
--create table insertconflict (f1 int primary key, f2 text);
--create view insertconflictv as
--  select * from insertconflict with cascaded check option;
--insert into insertconflictv values (1,'foo')
--  on conflict (f1) do update set f2 = excluded.f2;
--select * from insertconflict;
--insert into insertconflictv values (1,'bar')
--  on conflict (f1) do update set f2 = excluded.f2;
--select * from insertconflict;
--drop view insertconflictv;
-- drop table insertconflict;
-- ******************************************************************
-- *                                                                *
-- * Test inheritance (example taken from tutorial)                 *
-- *                                                                *
-- ******************************************************************
create table cities (
	name		text,
	population	float8,
	altitude	int		-- (in ft)
);
CREATE TABLE
create table capitals (
	state		char(2)
) inherits (cities);
CREATE TABLE
-- prepopulate the tables.
insert into cities values ('San Francisco', 7.24E+5, 63);
INSERT 0 1
insert into cities values ('Las Vegas', 2.583E+5, 2174);
INSERT 0 1
insert into cities values ('Mariposa', 1200, 1953);
INSERT 0 1
insert into capitals values ('Sacramento', 3.694E+5, 30, 'CA');
INSERT 0 1
insert into capitals values ('Madison', 1.913E+5, 845, 'WI');
INSERT 0 1
-- Tests proper for inheritance:
select * from capitals;
    name    | population | altitude | state 
------------+------------+----------+-------
 Sacramento |     369400 |       30 | CA
 Madison    |     191300 |      845 | WI
(2 rows)

-- Succeeds:
insert into cities values ('Las Vegas', 2.583E+5, 2174) on conflict do nothing;
INSERT 0 1
insert into capitals values ('Sacramento', 4664.E+5, 30, 'CA') on conflict (name) do update set population = excluded.population;
psql:sql/insert_conflict.sql:263: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- Wrong "Sacramento", so do nothing:
insert into capitals values ('Sacramento', 50, 2267, 'NE') on conflict (name) do nothing;
psql:sql/insert_conflict.sql:265: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
select * from capitals;
    name    | population | altitude | state 
------------+------------+----------+-------
 Sacramento |     369400 |       30 | CA
 Madison    |     191300 |      845 | WI
(2 rows)

insert into cities values ('Las Vegas', 5.83E+5, 2001) on conflict (name) do update set population = excluded.population, altitude = excluded.altitude;
psql:sql/insert_conflict.sql:267: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into capitals values ('Las Vegas', 5.83E+5, 2222, 'NV') on conflict (name) do update set population = excluded.population;
psql:sql/insert_conflict.sql:268: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- Capitals will contain new capital, Las Vegas:
select * from capitals;
    name    | population | altitude | state 
------------+------------+----------+-------
 Sacramento |     369400 |       30 | CA
 Madison    |     191300 |      845 | WI
(2 rows)

-- Cities contains two instances of "Las Vegas", since unique constraints don't
-- work across inheritance:
-- This only affects "cities" version of "Las Vegas":
insert into cities values ('Las Vegas', 5.86E+5, 2223) on conflict (name) do update set population = excluded.population, altitude = excluded.altitude;
psql:sql/insert_conflict.sql:274: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- clean up
drop table capitals;
DROP TABLE
drop table cities;
DROP TABLE
-- Make sure a table named excluded is handled properly
create table excluded(key1 int primary key, data text);
CREATE TABLE
insert into excluded values(1, '1');
INSERT 0 1
-- error, ambiguous
insert into excluded values(1, '2') on conflict (key1) do update set data = excluded.data RETURNING *;
psql:sql/insert_conflict.sql:285: ERROR:  table reference "excluded" is ambiguous
LINE 1: ...s(1, '2') on conflict (key1) do update set data = excluded.d...
                                                             ^
-- ok, aliased
insert into excluded AS target values(1, '2') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    1 | 2
(1 row)

INSERT 0 2
-- ok, aliased
insert into excluded AS target values(1, '2') on conflict (key1) do update set data = target.data RETURNING *;
 key1 | data 
------+------
    1 | 2
(1 row)

INSERT 0 0
-- make sure excluded isn't a problem in returning clause
insert into excluded values(1, '2') on conflict (key1) do update set data = 3 RETURNING excluded.*;
 key1 | data 
------+------
    1 | 2
(1 row)

INSERT 0 2
-- clean up
drop table excluded;
DROP TABLE
-- Check tables w/o oids are handled correctly
create table testoids(key1 int primary key, data text) without oids;
CREATE TABLE
-- first without oids
insert into testoids values(1, '1') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    1 | 1
(1 row)

INSERT 0 1
insert into testoids values(1, '2') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    1 | 2
(1 row)

INSERT 0 2
-- update existing row, that didn't have an oid
insert into testoids values(1, '3') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    1 | 3
(1 row)

INSERT 0 2
-- insert a new row
insert into testoids values(2, '1') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    2 | 1
(1 row)

INSERT 0 1
-- and update it
insert into testoids values(2, '2') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    2 | 2
(1 row)

INSERT 0 2
-- remove oids again, test
alter table testoids set without oids;
ALTER TABLE
insert into testoids values(1, '4') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    1 | 4
(1 row)

INSERT 0 2
insert into testoids values(3, '1') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    3 | 1
(1 row)

INSERT 0 1
insert into testoids values(3, '2') on conflict (key1) do update set data = excluded.data RETURNING *;
 key1 | data 
------+------
    3 | 2
(1 row)

INSERT 0 2
drop table testoids;
DROP TABLE
-- check that references to columns after dropped columns are handled correctly
create table dropcol(key1 int primary key, drop1 int, keep1 text, drop2 numeric, keep2 float);
CREATE TABLE
insert into dropcol(key1, drop1, keep1, drop2, keep2) values(1, 1, '1', '1', 1);
INSERT 0 1
-- set using excluded
insert into dropcol(key1, drop1, keep1, drop2, keep2) values(1, 2, '2', '2', 2) on conflict(key1)
    do update set drop1 = excluded.drop1, keep1 = excluded.keep1, drop2 = excluded.drop2, keep2 = excluded.keep2
    where excluded.drop1 is not null and excluded.keep1 is not null and excluded.drop2 is not null and excluded.keep2 is not null
          and dropcol.drop1 is not null and dropcol.keep1 is not null and dropcol.drop2 is not null and dropcol.keep2 is not null
    returning *;
psql:sql/insert_conflict.sql:325: ERROR:  Kunlun-db: On conflict action do not support where clause.
;
-- set using existing table
insert into dropcol(key1, drop1, keep1, drop2, keep2) values(1, 3, '3', '3', 3) on conflict(key1)
    do update set drop1 = dropcol.drop1, keep1 = dropcol.keep1, drop2 = dropcol.drop2, keep2 = dropcol.keep2
    returning *;
 key1 | drop1 | keep1 | drop2 | keep2 
------+-------+-------+-------+-------
    1 |     3 | 3     |     3 |     3
(1 row)

INSERT 0 0
;
alter table dropcol drop column drop1, drop column drop2;
ALTER TABLE
-- set using excluded
insert into dropcol(key1, keep1, keep2) values(1, '4', 4) on conflict(key1)
    do update set keep1 = excluded.keep1, keep2 = excluded.keep2
    where excluded.keep1 is not null and excluded.keep2 is not null
          and dropcol.keep1 is not null and dropcol.keep2 is not null
    returning *;
psql:sql/insert_conflict.sql:338: ERROR:  Kunlun-db: On conflict action do not support where clause.
;
-- set using existing table
insert into dropcol(key1, keep1, keep2) values(1, '5', 5) on conflict(key1)
    do update set keep1 = dropcol.keep1, keep2 = dropcol.keep2
    returning *;
 key1 | keep1 | keep2 
------+-------+-------
    1 | 5     |     5
(1 row)

INSERT 0 0
;
drop table dropcol;
DROP TABLE
-- check handling of regular btree constraint along with gist constraint
create temp table twoconstraints (f1 int unique, f2 box);
CREATE TABLE
insert into twoconstraints values(1, '((0,0),(1,1))');
INSERT 0 1
insert into twoconstraints values(1, '((2,2),(3,3))');  -- fail on f1
psql:sql/insert_conflict.sql:352: ERROR:  duplicate key value violates unique constraint "twoconstraints_f1_key"
DETAIL:  Key (f1)=(1) already exists.
insert into twoconstraints values(2, '((0,0),(1,2))');  -- fail on f2
INSERT 0 1
insert into twoconstraints values(2, '((0,0),(1,2))')
  on conflict on constraint twoconstraints_f1_key do nothing;  -- fail on f2
INSERT 0 0
insert into twoconstraints values(2, '((0,0),(1,2))')
  on conflict on constraint twoconstraints_f2_excl do nothing;  -- do nothing
psql:sql/insert_conflict.sql:357: ERROR:  constraint "twoconstraints_f2_excl" for table "twoconstraints" does not exist
select * from twoconstraints;
 f1 |     f2      
----+-------------
  1 | (1,1),(0,0)
  2 | (1,2),(0,0)
(2 rows)

drop table twoconstraints;
DROP TABLE
-- check handling of self-conflicts at various isolation levels
create table selfconflict (f1 int primary key, f2 int);
CREATE TABLE
begin transaction isolation level read committed;
BEGIN
insert into selfconflict values (1,1), (1,2) on conflict do nothing;
INSERT 0 1
commit;
COMMIT
begin transaction isolation level repeatable read;
BEGIN
insert into selfconflict values (2,1), (2,2) on conflict do nothing;
INSERT 0 1
commit;
COMMIT
begin transaction isolation level serializable;
BEGIN
insert into selfconflict values (3,1), (3,2) on conflict do nothing;
INSERT 0 1
commit;
COMMIT
begin transaction isolation level read committed;
BEGIN
insert into selfconflict values (4,1), (4,2) on conflict(f1) do update set f2 = 0;
INSERT 0 3
commit;
COMMIT
begin transaction isolation level repeatable read;
BEGIN
insert into selfconflict values (5,1), (5,2) on conflict(f1) do update set f2 = 0;
INSERT 0 3
commit;
COMMIT
begin transaction isolation level serializable;
BEGIN
insert into selfconflict values (6,1), (6,2) on conflict(f1) do update set f2 = 0;
INSERT 0 3
commit;
COMMIT
select * from selfconflict;
 f1 | f2 
----+----
  1 |  1
  2 |  1
  3 |  1
  4 |  0
  5 |  0
  6 |  0
(6 rows)

drop table selfconflict;
DROP TABLE
-- check ON CONFLICT handling with partitioned tables
create table parted_conflict_test (a int unique, b char) partition by list (a);
CREATE TABLE
create table parted_conflict_test_1 partition of parted_conflict_test (b unique) for values in (1, 2);
CREATE TABLE
-- no indexes required here
insert into parted_conflict_test values (1, 'a') on conflict do nothing;
INSERT 0 1
-- index on a required, which does exist in parent
insert into parted_conflict_test values (1, 'a') on conflict (a) do nothing;
INSERT 0 0
insert into parted_conflict_test values (1, 'a') on conflict (a) do update set b = excluded.b;
INSERT 0 0
-- targeting partition directly will work
insert into parted_conflict_test_1 values (1, 'a') on conflict (a) do nothing;
psql:sql/insert_conflict.sql:405: ERROR:  In KunlunDB, the unique constraint referenced by the ON CONFLICT clause needs to be null when there are multiple unique constraints.
HINT:  In kunlunDB, do not specify conflict target in ON CONFLICT.
insert into parted_conflict_test_1 values (1, 'b') on conflict (a) do update set b = excluded.b;
psql:sql/insert_conflict.sql:406: ERROR:  In KunlunDB, the unique constraint referenced by the ON CONFLICT clause needs to be null when there are multiple unique constraints.
HINT:  In kunlunDB, do not specify conflict target in ON CONFLICT.
-- index on b required, which doesn't exist in parent
insert into parted_conflict_test values (2, 'b') on conflict (b) do update set a = excluded.a;
psql:sql/insert_conflict.sql:409: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
-- targeting partition directly will work
insert into parted_conflict_test_1 values (2, 'b') on conflict (b) do update set a = excluded.a;
psql:sql/insert_conflict.sql:412: ERROR:  In KunlunDB, the unique constraint referenced by the ON CONFLICT clause needs to be null when there are multiple unique constraints.
HINT:  In kunlunDB, do not specify conflict target in ON CONFLICT.
-- should see (2, 'b')
select * from parted_conflict_test order by a;
 a | b 
---+---
 1 | a
(1 row)

-- should see (3, 'b')
select * from parted_conflict_test order by a;
 a | b 
---+---
 1 | a
(1 row)

-- case where parent will have a dropped column, but the partition won't
alter table parted_conflict_test drop b, add b char;
ALTER TABLE
create table parted_conflict_test_3 partition of parted_conflict_test for values in (4);
CREATE TABLE
delete from parted_conflict_test;
DELETE 1
insert into parted_conflict_test (a, b) values (4, 'a') on conflict (a) do update set b = excluded.b;
psql:sql/insert_conflict.sql:424: ERROR:  Kunlun-db: The on conflict action cannot be serialized
insert into parted_conflict_test (a, b) values (4, 'b') on conflict (a) do update set b = excluded.b where parted_conflict_test.b = 'a';
psql:sql/insert_conflict.sql:425: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- should see (4, 'b')
select * from parted_conflict_test order by a;
 a | b 
---+---
(0 rows)

-- case with multi-level partitioning
create table parted_conflict_test_4 partition of parted_conflict_test for values in (5) partition by list (a);
CREATE TABLE
create table parted_conflict_test_4_1 partition of parted_conflict_test_4 for values in (5);
CREATE TABLE
delete from parted_conflict_test;
DELETE 0
insert into parted_conflict_test (a, b) values (5, 'a') on conflict (a) do update set b = excluded.b;
psql:sql/insert_conflict.sql:434: ERROR:  Kunlun-db: The on conflict action cannot be serialized
insert into parted_conflict_test (a, b) values (5, 'b') on conflict (a) do update set b = excluded.b where parted_conflict_test.b = 'a';
psql:sql/insert_conflict.sql:435: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- should see (5, 'b')
select * from parted_conflict_test order by a;
 a | b 
---+---
(0 rows)

-- test with multiple rows
delete from parted_conflict_test;
DELETE 0
insert into parted_conflict_test (a, b) values (1, 'a'), (2, 'a'), (4, 'a') on conflict (a) do update set b = excluded.b where excluded.b = 'b';
psql:sql/insert_conflict.sql:442: ERROR:  Kunlun-db: On conflict action do not support where clause.
insert into parted_conflict_test (a, b) values (1, 'b'), (2, 'c'), (4, 'b') on conflict (a) do update set b = excluded.b where excluded.b = 'b';
psql:sql/insert_conflict.sql:443: ERROR:  Kunlun-db: On conflict action do not support where clause.
-- should see (1, 'b'), (2, 'a'), (4, 'b')
select * from parted_conflict_test order by a;
 a | b 
---+---
(0 rows)

drop table parted_conflict_test;
DROP TABLE
-- test behavior of inserting a conflicting tuple into an intermediate
-- partitioning level
create table parted_conflict (a int primary key, b text) partition by range (a);
CREATE TABLE
create table parted_conflict_1 partition of parted_conflict for values from (0) to (1000) partition by range (a);
CREATE TABLE
create table parted_conflict_1_1 partition of parted_conflict_1 for values from (0) to (500);
CREATE TABLE
insert into parted_conflict values (40, 'forty');
INSERT 0 1
insert into parted_conflict_1 values (40, 'cuarenta')
  on conflict (a) do update set b = excluded.b;
INSERT 0 2
drop table parted_conflict;
DROP TABLE
-- same thing, but this time try to use an index that's created not in the
-- partition
create table parted_conflict (a int, b text) partition by range (a);
CREATE TABLE
create table parted_conflict_1 partition of parted_conflict for values from (0) to (1000) partition by range (a);
CREATE TABLE
create table parted_conflict_1_1 partition of parted_conflict_1 for values from (0) to (500);
CREATE TABLE
create unique index on only parted_conflict_1 (a);
CREATE INDEX
create unique index on only parted_conflict (a);
CREATE INDEX
--alter index parted_conflict_a_idx attach partition parted_conflict_1_a_idx;
insert into parted_conflict values (40, 'forty');
INSERT 0 1
insert into parted_conflict_1 values (40, 'cuarenta')
  on conflict (a) do update set b = excluded.b;
psql:sql/insert_conflict.sql:470: ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
drop table parted_conflict;
DROP TABLE
