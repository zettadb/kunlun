--
-- CREATE_INDEX
-- Create ancillary data structures (i.e. indices)
--
set default_nulls_smallest = off;
psql:sql/create_index.sql:5: ERROR:  unrecognized mysql configuration parameter "default_nulls_smallest"
--
-- BTREE
--
CREATE INDEX onek_unique1 ON onek USING btree(unique1 int4_ops);
CREATE INDEX
CREATE INDEX IF NOT EXISTS onek_unique1 ON onek USING btree(unique1 int4_ops);
psql:sql/create_index.sql:11: NOTICE:  relation "onek_unique1" already exists, skipping
CREATE INDEX
CREATE INDEX IF NOT EXISTS ON onek USING btree(unique1 int4_ops);
psql:sql/create_index.sql:13: ERROR:  syntax error at or near "ON"
LINE 1: CREATE INDEX IF NOT EXISTS ON onek USING btree(unique1 int4_...
                                   ^
CREATE INDEX onek_unique2 ON onek USING btree(unique2 int4_ops);
CREATE INDEX
CREATE INDEX onek_hundred ON onek USING btree(hundred int4_ops);
CREATE INDEX
CREATE INDEX onek_stringu1 ON onek USING btree(stringu1 name_ops);
CREATE INDEX
CREATE INDEX tenk1_unique1 ON tenk1 USING btree(unique1 int4_ops);
CREATE INDEX
CREATE INDEX tenk1_unique2 ON tenk1 USING btree(unique2 int4_ops);
CREATE INDEX
CREATE INDEX tenk1_hundred ON tenk1 USING btree(hundred int4_ops);
CREATE INDEX
CREATE INDEX tenk1_thous_tenthous ON tenk1 (thousand, tenthous);
CREATE INDEX
CREATE INDEX tenk2_unique1 ON tenk2 USING btree(unique1 int4_ops);
CREATE INDEX
CREATE INDEX tenk2_unique2 ON tenk2 USING btree(unique2 int4_ops);
CREATE INDEX
CREATE INDEX tenk2_hundred ON tenk2 USING btree(hundred int4_ops);
CREATE INDEX
-- test comments
COMMENT ON INDEX six_wrong IS 'bad index';
psql:sql/create_index.sql:36: ERROR:  relation "six_wrong" does not exist
COMMENT ON INDEX six IS 'good index';
psql:sql/create_index.sql:37: ERROR:  relation "six" does not exist
COMMENT ON INDEX six IS NULL;
psql:sql/create_index.sql:38: ERROR:  relation "six" does not exist
--
-- BTREE ascending/descending cases
--
-- we load int4/text from pure descending data (each key is a new
-- low key) and name/f8 from pure ascending data (each key is a new
-- high key).  we had a bug where new low keys would sometimes be
-- "lost".
--
CREATE INDEX bt_i4_index ON bt_i4_heap USING btree (seqno int4_ops);
CREATE INDEX
CREATE INDEX bt_name_index ON bt_name_heap USING btree (seqno name_ops);
CREATE INDEX
-- CREATE INDEX bt_txt_index ON bt_txt_heap USING btree (seqno text_ops);
CREATE INDEX bt_f8_index ON bt_f8_heap USING btree (seqno float8_ops);
CREATE INDEX
--
-- HASH
--
CREATE INDEX hash_i4_index ON hash_i4_heap USING hash (random int4_ops);
CREATE INDEX
CREATE INDEX hash_name_index ON hash_name_heap USING hash (random name_ops);
CREATE INDEX
-- CREATE INDEX hash_txt_index ON hash_txt_heap USING hash (random text_ops);
CREATE INDEX hash_f8_index ON hash_f8_heap USING hash (random float8_ops) WITH (fillfactor=60);
CREATE INDEX
CREATE TEMP TABLE unlogged_hash_table (id int4);
CREATE TABLE
CREATE INDEX unlogged_hash_index ON unlogged_hash_table USING hash (id int4_ops);
CREATE INDEX
DROP TABLE unlogged_hash_table;
DROP TABLE
-- CREATE INDEX hash_ovfl_index ON hash_ovfl_heap USING hash (x int4_ops);
-- Test hash index build tuplesorting.  Force hash tuplesort using low
-- maintenance_work_mem setting and fillfactor:
SET maintenance_work_mem = '1MB';
SET
CREATE INDEX hash_tuplesort_idx ON tenk1 USING hash (stringu1 name_ops) WITH (fillfactor = 10);
CREATE INDEX
EXPLAIN (COSTS OFF)
SELECT count(*) FROM tenk1 WHERE stringu1 = 'TVAAAA';

SELECT count(*) FROM tenk1 WHERE stringu1 = 'TVAAAA';
 count 
-------
    14
(1 row)

DROP INDEX hash_tuplesort_idx;
DROP INDEX
RESET maintenance_work_mem;
RESET
--
-- Test unique index with included columns
--
CREATE TABLE covering_index_heap (f1 int, f2 int, f3 text);
CREATE TABLE
CREATE UNIQUE INDEX covering_index_index on covering_index_heap (f1,f2);
CREATE INDEX
INSERT INTO covering_index_heap VALUES(1,1,'AAA');
INSERT 0 1
INSERT INTO covering_index_heap VALUES(1,2,'AAA');
INSERT 0 1
-- this should fail because of unique index on f1,f2:
INSERT INTO covering_index_heap VALUES(1,2,'BBB');
psql:sql/create_index.sql:91: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '1-2' for key 'covering_index_heap.covering_index_index'.
-- and this shouldn't:
INSERT INTO covering_index_heap VALUES(1,4,'AAA');
INSERT 0 1
-- Try to build index on table that already contains data
CREATE UNIQUE INDEX covering_pkey on covering_index_heap (f1,f2);
CREATE INDEX
-- Try to use existing covering index as primary key
-- ALTER TABLE covering_index_heap ADD CONSTRAINT covering_pkey PRIMARY KEY USING INDEX covering_pkey;
DROP TABLE covering_index_heap;
DROP TABLE
--
-- Test ADD CONSTRAINT USING INDEX
--
CREATE TABLE cwi_test( a int , b varchar(10), c char);
CREATE TABLE
-- add some data so that all tests have something to work with.
INSERT INTO cwi_test VALUES(1, 2), (3, 4), (5, 6);
INSERT 0 3
CREATE UNIQUE INDEX cwi_uniq_idx ON cwi_test(a , b);
CREATE INDEX
--ALTER TABLE cwi_test ADD primary key USING INDEX cwi_uniq_idx;
\d cwi_test
                     Table "public.cwi_test"
 Column |         Type          | Collation | Nullable | Default 
--------+-----------------------+-----------+----------+---------
 a      | integer               |           |          | 
 b      | character varying(10) |           |          | 
 c      | character(1)          |           |          | 
Indexes:
    "cwi_uniq_idx" UNIQUE, btree (a NULLS FIRST, b NULLS FIRST)

\d cwi_uniq_idx
            Index "public.cwi_uniq_idx"
 Column |         Type          | Key? | Definition 
--------+-----------------------+------+------------
 a      | integer               | yes  | a
 b      | character varying(10) | yes  | b
unique, btree, for table "public.cwi_test"

CREATE UNIQUE INDEX cwi_uniq2_idx ON cwi_test(b , a);
CREATE INDEX
--ALTER TABLE cwi_test DROP CONSTRAINT cwi_uniq_idx,
--	ADD CONSTRAINT cwi_replaced_pkey PRIMARY KEY
--		USING INDEX cwi_uniq2_idx;
--\d cwi_test
--\d cwi_replaced_pkey
--DROP INDEX cwi_replaced_pkey;	-- Should fail; a constraint depends on it
DROP TABLE cwi_test;
DROP TABLE
-- ADD CONSTRAINT USING INDEX is forbidden on partitioned tables
CREATE TABLE cwi_test(a int) PARTITION BY hash (a);
CREATE TABLE
create unique index on cwi_test (a);
CREATE INDEX
--alter table cwi_test add primary key using index cwi_test_a_idx ;
DROP TABLE cwi_test;
DROP TABLE
--
-- Tests for IS NULL/IS NOT NULL with b-tree indexes
--
drop table if exists onek_with_null;
psql:sql/create_index.sql:135: NOTICE:  table "onek_with_null" does not exist, skipping
DROP TABLE
create table onek_with_null (like onek);
CREATE TABLE
INSERT INTO onek_with_null (unique1,unique2) VALUES (NULL, -1), (NULL, NULL);
INSERT 0 2
CREATE UNIQUE INDEX onek_nulltest ON onek_with_null (unique2,unique1);
CREATE INDEX
SET enable_seqscan = OFF;
SET
SET enable_indexscan = ON;
SET
SET enable_bitmapscan = ON;
SET
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_nulltest;
DROP INDEX
CREATE UNIQUE INDEX onek_nulltest ON onek_with_null (unique2 desc,unique1);
CREATE INDEX
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_nulltest;
DROP INDEX
CREATE UNIQUE INDEX onek_nulltest ON onek_with_null (unique2 desc nulls last,unique1);
CREATE INDEX
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_nulltest;
DROP INDEX
CREATE UNIQUE INDEX onek_nulltest ON onek_with_null (unique2  nulls first,unique1);
CREATE INDEX
SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL;
 count 
-------
     2
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique2 IS NOT NULL;
 count 
-------
     1
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NOT NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

SELECT count(*) FROM onek_with_null WHERE unique1 IS NULL AND unique1 > 500;
 count 
-------
     0
(1 row)

DROP INDEX onek_nulltest;
DROP INDEX
-- Check initial-positioning logic too
CREATE UNIQUE INDEX onek_nulltest ON onek_with_null (unique2);
CREATE INDEX
SET enable_seqscan = OFF;
SET
SET enable_indexscan = ON;
SET
SET enable_bitmapscan = OFF;
SET
SELECT unique1, unique2 FROM onek_with_null
  ORDER BY unique2 LIMIT 2;
 unique1 | unique2 
---------+---------
         |      -1
         |        
(2 rows)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 >= -1
  ORDER BY unique2 LIMIT 2;
 unique1 | unique2 
---------+---------
         |      -1
(1 row)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 >= 0
  ORDER BY unique2 LIMIT 2;
 unique1 | unique2 
---------+---------
(0 rows)

SELECT unique1, unique2 FROM onek_with_null
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
         |        
         |      -1
(2 rows)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 >= -1
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
         |      -1
(1 row)

SELECT unique1, unique2 FROM onek_with_null WHERE unique2 < 999
  ORDER BY unique2 DESC LIMIT 2;
 unique1 | unique2 
---------+---------
         |      -1
(1 row)

RESET enable_seqscan;
RESET
RESET enable_indexscan;
RESET
RESET enable_bitmapscan;
RESET
DROP TABLE onek_with_null;
DROP TABLE
--
-- Check bitmap index path planning
--
EXPLAIN (COSTS OFF)
SELECT * FROM tenk1
  WHERE thousand = 42 AND (tenthous = 1 OR tenthous = 3 OR tenthous = 42);

SELECT * FROM tenk1
  WHERE thousand = 42 AND (tenthous = 1 OR tenthous = 3 OR tenthous = 42);
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
      42 |    5530 |   0 |    2 |   2 |      2 |      42 |       42 |          42 |        42 |       42 |  84 |   85 | QBAAAA   | SEIAAA   | OOOOxx
(1 row)

EXPLAIN (COSTS OFF)
SELECT count(*) FROM tenk1
  WHERE hundred = 42 AND (thousand = 42 OR thousand = 99);

SELECT count(*) FROM tenk1
  WHERE hundred = 42 AND (thousand = 42 OR thousand = 99);
 count 
-------
    10
(1 row)

explain (costs off)
SELECT unique1 FROM tenk1
WHERE unique1 IN (1,42,7)
ORDER BY unique1;

SELECT unique1 FROM tenk1
WHERE unique1 IN (1,42,7)
ORDER BY unique1;
 unique1 
---------
       1
       7
      42
(3 rows)

explain (costs off)
SELECT thousand, tenthous FROM tenk1
WHERE thousand < 2 AND tenthous IN (1001,3000)
ORDER BY thousand;

SELECT thousand, tenthous FROM tenk1
WHERE thousand < 2 AND tenthous IN (1001,3000)
ORDER BY thousand;
 thousand | tenthous 
----------+----------
        0 |     3000
        1 |     1001
(2 rows)

SET enable_indexonlyscan = OFF;
SET
explain (costs off)
SELECT thousand, tenthous FROM tenk1
WHERE thousand < 2 AND tenthous IN (1001,3000)
ORDER BY thousand;

SELECT thousand, tenthous FROM tenk1
WHERE thousand < 2 AND tenthous IN (1001,3000)
ORDER BY thousand;
 thousand | tenthous 
----------+----------
        0 |     3000
        1 |     1001
(2 rows)

RESET enable_indexonlyscan;
RESET
--
-- Check elimination of constant-NULL subexpressions
--
explain (costs off)
  select * from tenk1 where (thousand, tenthous) in ((1,1001), (null,null));

--
-- Check matching of boolean index columns to WHERE conditions and sort keys
--
create temp table boolindex (b bool, i int, unique(b, i), junk float);
CREATE TABLE
explain (costs off)
  select * from boolindex order by b, i limit 10;

explain (costs off)
  select * from boolindex where b order by i limit 10;

explain (costs off)
  select * from boolindex where b = true order by i desc limit 10;

explain (costs off)
  select * from boolindex where not b order by i limit 10;

--
-- Test for multilevel page deletion
--
CREATE TABLE delete_test_table (a bigint, b bigint, c bigint, d bigint);
CREATE TABLE
INSERT INTO delete_test_table SELECT i, 1, 2, 3 FROM generate_series(1,80000) i;
INSERT 0 80000
ALTER TABLE delete_test_table ADD PRIMARY KEY (a,b,c,d);
ALTER TABLE
DELETE FROM delete_test_table WHERE a > 40000;
DELETE 40000
DELETE FROM delete_test_table WHERE a > 10;
DELETE 39990
DROP TABLE delete_test_table;
DROP TABLE
-- index inside schema
CREATE SCHEMA schema_to_reindex;
CREATE SCHEMA
SET search_path = 'schema_to_reindex';
SET
CREATE TABLE table1(col1 SERIAL PRIMARY KEY);
CREATE TABLE
INSERT INTO table1 SELECT generate_series(1,400);
INSERT 0 400
CREATE TABLE table2(col1 SERIAL PRIMARY KEY, col2 TEXT NOT NULL);
CREATE TABLE
INSERT INTO table2 SELECT generate_series(1,400), 'abc';
INSERT 0 400
-- CREATE INDEX ON table2(col2);
--CREATE MATERIALIZED VIEW matview AS SELECT col1 FROM table2;
--CREATE INDEX ON matview(col1);
CREATE VIEW view AS SELECT col2 FROM table2;
CREATE VIEW
DROP TABLE table1;
DROP TABLE
--DROP TABLE table2 cascade;
DROP SCHEMA schema_to_reindex CASCADE;
psql:sql/create_index.sql:304: NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table table2
drop cascades to view view
DROP SCHEMA
