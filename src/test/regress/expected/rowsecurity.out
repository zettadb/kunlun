--
-- Test of Row-level security feature
--
-- Clean up in case a prior regression run failed
-- Suppress NOTICE messages when users/groups don't exist
SET client_min_messages TO 'warning';
SET
DROP USER IF EXISTS regress_rls_alice;
DROP ROLE
DROP USER IF EXISTS regress_rls_bob;
DROP ROLE
DROP USER IF EXISTS regress_rls_carol;
DROP ROLE
DROP USER IF EXISTS regress_rls_dave;
DROP ROLE
DROP USER IF EXISTS regress_rls_exempt_user;
DROP ROLE
DROP ROLE IF EXISTS regress_rls_group1;
DROP ROLE
DROP ROLE IF EXISTS regress_rls_group2;
DROP ROLE
DROP SCHEMA IF EXISTS regress_rls_schema CASCADE;
DROP SCHEMA
RESET client_min_messages;
RESET
-- initial setup
CREATE USER regress_rls_alice NOLOGIN;
CREATE ROLE
CREATE USER regress_rls_bob NOLOGIN;
CREATE ROLE
CREATE USER regress_rls_carol NOLOGIN;
CREATE ROLE
CREATE USER regress_rls_dave NOLOGIN;
CREATE ROLE
CREATE USER regress_rls_exempt_user BYPASSRLS NOLOGIN;
CREATE ROLE
CREATE ROLE regress_rls_group1 NOLOGIN;
CREATE ROLE
CREATE ROLE regress_rls_group2 NOLOGIN;
CREATE ROLE
GRANT regress_rls_group1 TO regress_rls_bob;
GRANT ROLE
GRANT regress_rls_group2 TO regress_rls_carol;
GRANT ROLE
CREATE SCHEMA regress_rls_schema;
CREATE SCHEMA
GRANT ALL ON SCHEMA regress_rls_schema to public;
GRANT
SET search_path = regress_rls_schema;
SET
-- setup of malicious function
CREATE OR REPLACE FUNCTION f_leak(text) RETURNS bool
    COST 0.0000001 LANGUAGE plpgsql
    AS 'BEGIN RAISE NOTICE ''f_leak => %'', $1; RETURN true; END';
CREATE FUNCTION
GRANT EXECUTE ON FUNCTION f_leak(text) TO public;
GRANT
-- BASIC Row-Level Security Scenario
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE uaccount (
    pguser      name primary key,
    seclv       int
);
CREATE TABLE
GRANT SELECT ON uaccount TO public;
GRANT
INSERT INTO uaccount VALUES
    ('regress_rls_alice', 99),
    ('regress_rls_bob', 1),
    ('regress_rls_carol', 2),
    ('regress_rls_dave', 3);
INSERT 0 4
	
CREATE TABLE category (
    cid        int primary key,
    cname      text
);
CREATE TABLE
GRANT ALL ON category TO public;
GRANT
INSERT INTO category VALUES
    (11, 'novel'),
    (22, 'science fiction'),
    (33, 'technology'),
    (44, 'manga');
INSERT 0 4
	
CREATE TABLE document (
    did         int primary key,
    cid         int,
    dlevel      int not null,
    dauthor     name,
    dtitle      text
);
CREATE TABLE
GRANT ALL ON document TO public;
GRANT
INSERT INTO document VALUES
    ( 1, 11, 1, 'regress_rls_bob', 'my first novel'),
    ( 2, 11, 2, 'regress_rls_bob', 'my second novel'),
    ( 3, 22, 2, 'regress_rls_bob', 'my science fiction'),
    ( 4, 44, 1, 'regress_rls_bob', 'my first manga'),
    ( 5, 44, 2, 'regress_rls_bob', 'my second manga'),
    ( 6, 22, 1, 'regress_rls_carol', 'great science fiction'),
    ( 7, 33, 2, 'regress_rls_carol', 'great technology book'),
    ( 8, 44, 1, 'regress_rls_carol', 'great manga'),
    ( 9, 22, 1, 'regress_rls_dave', 'awesome science fiction'),
    (10, 33, 2, 'regress_rls_dave', 'awesome technology book');
INSERT 0 10
\dp
                                                 Access privileges
       Schema       |   Name   | Type  |              Access privileges              | Column privileges | Policies 
--------------------+----------+-------+---------------------------------------------+-------------------+----------
 regress_rls_schema | category | table | regress_rls_alice=arwdDxt/regress_rls_alice+|                   | 
                    |          |       | =arwdDxt/regress_rls_alice                  |                   | 
 regress_rls_schema | document | table | regress_rls_alice=arwdDxt/regress_rls_alice+|                   | 
                    |          |       | =arwdDxt/regress_rls_alice                  |                   | 
 regress_rls_schema | uaccount | table | regress_rls_alice=arwdDxt/regress_rls_alice+|                   | 
                    |          |       | =r/regress_rls_alice                        |                   | 
(3 rows)

\d document
        Table "regress_rls_schema.document"
 Column  |  Type   | Collation | Nullable | Default 
---------+---------+-----------+----------+---------
 did     | integer |           | not null | 
 cid     | integer |           |          | 
 dlevel  | integer |           | not null | 
 dauthor | name    |           |          | 
 dtitle  | text    |           |          | 
Indexes:
    "document_pkey" PRIMARY KEY, btree (did NULLS FIRST)

SELECT * FROM pg_policies WHERE schemaname = 'regress_rls_schema' AND tablename = 'document' ORDER BY policyname;
 schemaname | tablename | policyname | permissive | roles | cmd | qual | with_check 
------------+-----------+------------+------------+-------+-----+------+------------
(0 rows)

-- viewpoint from regress_rls_bob
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
--SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
--SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER BY did;
-- try a sampled version
--SELECT * FROM document TABLESAMPLE BERNOULLI(50) REPEATABLE(0)
--  WHERE f_leak(dtitle) ORDER BY did;
-- viewpoint from regress_rls_carol
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:105: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
(10 rows)

SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:106: NOTICE:  f_leak => awesome technology book
 cid | did | dlevel |      dauthor      |         dtitle          |      cname      
-----+-----+--------+-------------------+-------------------------+-----------------
  11 |   1 |      1 | regress_rls_bob   | my first novel          | novel
  11 |   2 |      2 | regress_rls_bob   | my second novel         | novel
  22 |   3 |      2 | regress_rls_bob   | my science fiction      | science fiction
  44 |   4 |      1 | regress_rls_bob   | my first manga          | manga
  44 |   5 |      2 | regress_rls_bob   | my second manga         | manga
  22 |   6 |      1 | regress_rls_carol | great science fiction   | science fiction
  33 |   7 |      2 | regress_rls_carol | great technology book   | technology
  44 |   8 |      1 | regress_rls_carol | great manga             | manga
  22 |   9 |      1 | regress_rls_dave  | awesome science fiction | science fiction
  33 |  10 |      2 | regress_rls_dave  | awesome technology book | technology
(10 rows)

-- try a sampled version, not support
-- SELECT * FROM document TABLESAMPLE BERNOULLI(50) REPEATABLE(0)
--  WHERE f_leak(dtitle) ORDER BY did;
EXPLAIN (COSTS OFF) SELECT * FROM document WHERE f_leak(dtitle);

EXPLAIN (COSTS OFF) SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle);

-- viewpoint from regress_rls_dave
SET SESSION AUTHORIZATION regress_rls_dave;
SET
SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:117: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
(10 rows)

SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:118: NOTICE:  f_leak => awesome technology book
 cid | did | dlevel |      dauthor      |         dtitle          |      cname      
-----+-----+--------+-------------------+-------------------------+-----------------
  11 |   1 |      1 | regress_rls_bob   | my first novel          | novel
  11 |   2 |      2 | regress_rls_bob   | my second novel         | novel
  22 |   3 |      2 | regress_rls_bob   | my science fiction      | science fiction
  44 |   4 |      1 | regress_rls_bob   | my first manga          | manga
  44 |   5 |      2 | regress_rls_bob   | my second manga         | manga
  22 |   6 |      1 | regress_rls_carol | great science fiction   | science fiction
  33 |   7 |      2 | regress_rls_carol | great technology book   | technology
  44 |   8 |      1 | regress_rls_carol | great manga             | manga
  22 |   9 |      1 | regress_rls_dave  | awesome science fiction | science fiction
  33 |  10 |      2 | regress_rls_dave  | awesome technology book | technology
(10 rows)

EXPLAIN (COSTS OFF) SELECT * FROM document WHERE f_leak(dtitle);

EXPLAIN (COSTS OFF) SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle);

-- 44 would technically fail for both p2r and p1r, but we should get an error
-- back from p1r for this because it sorts first
INSERT INTO document VALUES (100, 44, 1, 'regress_rls_dave', 'testing sorting of policies'); -- fail
INSERT 0 1
-- Just to see a p2r error
INSERT INTO document VALUES (100, 55, 1, 'regress_rls_dave', 'testing sorting of policies'); -- fail
psql:sql/rowsecurity.sql:127: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '100' for key 'document.PRIMARY'.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
-- viewpoint from regress_rls_bob again
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:133: NOTICE:  f_leak => testing sorting of policies
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies
(11 rows)

SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER by did;
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:134: NOTICE:  f_leak => testing sorting of policies
 cid | did | dlevel |      dauthor      |           dtitle            |      cname      
-----+-----+--------+-------------------+-----------------------------+-----------------
  11 |   1 |      1 | regress_rls_bob   | my first novel              | novel
  11 |   2 |      2 | regress_rls_bob   | my second novel             | novel
  22 |   3 |      2 | regress_rls_bob   | my science fiction          | science fiction
  44 |   4 |      1 | regress_rls_bob   | my first manga              | manga
  44 |   5 |      2 | regress_rls_bob   | my second manga             | manga
  22 |   6 |      1 | regress_rls_carol | great science fiction       | science fiction
  33 |   7 |      2 | regress_rls_carol | great technology book       | technology
  44 |   8 |      1 | regress_rls_carol | great manga                 | manga
  22 |   9 |      1 | regress_rls_dave  | awesome science fiction     | science fiction
  33 |  10 |      2 | regress_rls_dave  | awesome technology book     | technology
  44 | 100 |      1 | regress_rls_dave  | testing sorting of policies | manga
(11 rows)

-- viewpoint from rls_regres_carol again
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:138: NOTICE:  f_leak => testing sorting of policies
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies
(11 rows)

SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle) ORDER by did;
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => my science fiction
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => my first manga
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => my second manga
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => great manga
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:139: NOTICE:  f_leak => testing sorting of policies
 cid | did | dlevel |      dauthor      |           dtitle            |      cname      
-----+-----+--------+-------------------+-----------------------------+-----------------
  11 |   1 |      1 | regress_rls_bob   | my first novel              | novel
  11 |   2 |      2 | regress_rls_bob   | my second novel             | novel
  22 |   3 |      2 | regress_rls_bob   | my science fiction          | science fiction
  44 |   4 |      1 | regress_rls_bob   | my first manga              | manga
  44 |   5 |      2 | regress_rls_bob   | my second manga             | manga
  22 |   6 |      1 | regress_rls_carol | great science fiction       | science fiction
  33 |   7 |      2 | regress_rls_carol | great technology book       | technology
  44 |   8 |      1 | regress_rls_carol | great manga                 | manga
  22 |   9 |      1 | regress_rls_dave  | awesome science fiction     | science fiction
  33 |  10 |      2 | regress_rls_dave  | awesome technology book     | technology
  44 | 100 |      1 | regress_rls_dave  | testing sorting of policies | manga
(11 rows)

EXPLAIN (COSTS OFF) SELECT * FROM document WHERE f_leak(dtitle);

EXPLAIN (COSTS OFF) SELECT * FROM document NATURAL JOIN category WHERE f_leak(dtitle);

-- interaction of FK/PK constraints
SET SESSION AUTHORIZATION regress_rls_alice;
SET
-- cannot delete PK referenced by invisible FK
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM document d FULL OUTER JOIN category c on d.cid = c.cid ORDER BY d.did, c.cid;
 did | cid | dlevel |      dauthor      |           dtitle            | cid |      cname      
-----+-----+--------+-------------------+-----------------------------+-----+-----------------
   1 |  11 |      1 | regress_rls_bob   | my first novel              |  11 | novel
   2 |  11 |      2 | regress_rls_bob   | my second novel             |  11 | novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction          |  22 | science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga              |  44 | manga
   5 |  44 |      2 | regress_rls_bob   | my second manga             |  44 | manga
   6 |  22 |      1 | regress_rls_carol | great science fiction       |  22 | science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book       |  33 | technology
   8 |  44 |      1 | regress_rls_carol | great manga                 |  44 | manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction     |  22 | science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book     |  33 | technology
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies |  44 | manga
(11 rows)

-- will crash: DELETE FROM category WHERE cid = 33;    -- fails with FK violation
-- can insert FK referencing invisible PK
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM document d FULL OUTER JOIN category c on d.cid = c.cid ORDER BY d.did, c.cid;
 did | cid | dlevel |      dauthor      |           dtitle            | cid |      cname      
-----+-----+--------+-------------------+-----------------------------+-----+-----------------
   1 |  11 |      1 | regress_rls_bob   | my first novel              |  11 | novel
   2 |  11 |      2 | regress_rls_bob   | my second novel             |  11 | novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction          |  22 | science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga              |  44 | manga
   5 |  44 |      2 | regress_rls_bob   | my second manga             |  44 | manga
   6 |  22 |      1 | regress_rls_carol | great science fiction       |  22 | science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book       |  33 | technology
   8 |  44 |      1 | regress_rls_carol | great manga                 |  44 | manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction     |  22 | science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book     |  33 | technology
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies |  44 | manga
(11 rows)

INSERT INTO document VALUES (11, 33, 1, current_user, 'hoge');
INSERT 0 1
-- UNIQUE or PRIMARY KEY constraint violation DOES reveal presence of row
SET SESSION AUTHORIZATION regress_rls_bob;
SET
INSERT INTO document VALUES (8, 44, 1, 'regress_rls_bob', 'my third manga'); -- Must fail with unique violation, revealing presence of did we can't see
psql:sql/rowsecurity.sql:159: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '8' for key 'document.PRIMARY'.
SELECT * FROM document WHERE did = 8; -- and confirm we can't see it
 did | cid | dlevel |      dauthor      |   dtitle    
-----+-----+--------+-------------------+-------------
   8 |  44 |      1 | regress_rls_carol | great manga
(1 row)

-- RLS policies are checked before constraints
INSERT INTO document VALUES (8, 44, 1, 'regress_rls_carol', 'my third manga'); -- Should fail with RLS check violation, not duplicate key violation
psql:sql/rowsecurity.sql:163: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '8' for key 'document.PRIMARY'.
UPDATE document SET did = 8, dauthor = 'regress_rls_carol' WHERE did = 5; -- Should fail with RLS check violation, not duplicate key violation
psql:sql/rowsecurity.sql:164: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '8' for key 'document.PRIMARY'.
-- database superuser does bypass RLS policy when enabled
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO ON;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies
(12 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  33 | technology
  44 | manga
(4 rows)

-- database superuser does bypass RLS policy when disabled
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies
(12 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  33 | technology
  44 | manga
(4 rows)

-- database non-superuser with bypass privilege can bypass RLS policy when disabled
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies
(12 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  33 | technology
  44 | manga
(4 rows)

-- RLS policy does not apply to table owner when RLS enabled.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies
(12 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  33 | technology
  44 | manga
(4 rows)

-- RLS policy does not apply to table owner when RLS disabled.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO OFF;
SET
SELECT * FROM document order by 1,2,3,4,5;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  22 |      2 | regress_rls_bob   | my science fiction
   4 |  44 |      1 | regress_rls_bob   | my first manga
   5 |  44 |      2 | regress_rls_bob   | my second manga
   6 |  22 |      1 | regress_rls_carol | great science fiction
   7 |  33 |      2 | regress_rls_carol | great technology book
   8 |  44 |      1 | regress_rls_carol | great manga
   9 |  22 |      1 | regress_rls_dave  | awesome science fiction
  10 |  33 |      2 | regress_rls_dave  | awesome technology book
  11 |  33 |      1 | regress_rls_carol | hoge
 100 |  44 |      1 | regress_rls_dave  | testing sorting of policies
(12 rows)

SELECT * FROM category;
 cid |      cname      
-----+-----------------
  11 | novel
  22 | science fiction
  33 | technology
  44 | manga
(4 rows)

SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
CREATE TABLE t1 (a int, junk1 text, b text);
CREATE TABLE
ALTER TABLE t1 DROP COLUMN junk1;    -- just a disturbing factor
ALTER TABLE
GRANT ALL ON t1 TO public;
GRANT
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM t1;
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

SELECT * FROM t1 WHERE f_leak(b);
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE f_leak(b);

-- superuser is allowed to bypass RLS checks
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
SELECT * FROM t1 WHERE f_leak(b);
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE f_leak(b);

-- non-superuser with bypass privilege can bypass RLS policy when disabled
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
SELECT * FROM t1 WHERE f_leak(b);
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE f_leak(b);

--
-- Partitioned Tables
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE part_document (
    did         int,
    cid         int,
    dlevel      int not null,
    dauthor     name,
    dtitle      text
) PARTITION BY RANGE (cid);
CREATE TABLE
GRANT ALL ON part_document TO public;
GRANT
-- Create partitions for document categories
CREATE TABLE part_document_fiction PARTITION OF part_document FOR VALUES FROM (11) to (12);
CREATE TABLE
CREATE TABLE part_document_satire PARTITION OF part_document FOR VALUES FROM (55) to (56);
CREATE TABLE
CREATE TABLE part_document_nonfiction PARTITION OF part_document FOR VALUES FROM (99) to (100);
CREATE TABLE
GRANT ALL ON part_document_fiction TO public;
GRANT
GRANT ALL ON part_document_satire TO public;
GRANT
GRANT ALL ON part_document_nonfiction TO public;
GRANT
INSERT INTO part_document VALUES
    ( 1, 11, 1, 'regress_rls_bob', 'my first novel'),
    ( 2, 11, 2, 'regress_rls_bob', 'my second novel'),
    ( 3, 99, 2, 'regress_rls_bob', 'my science textbook'),
    ( 4, 55, 1, 'regress_rls_bob', 'my first satire'),
    ( 5, 99, 2, 'regress_rls_bob', 'my history book'),
    ( 6, 11, 1, 'regress_rls_carol', 'great science fiction'),
    ( 7, 99, 2, 'regress_rls_carol', 'great technology book'),
    ( 8, 55, 2, 'regress_rls_carol', 'great satire'),
    ( 9, 11, 1, 'regress_rls_dave', 'awesome science fiction'),
    (10, 99, 2, 'regress_rls_dave', 'awesome technology book');
INSERT 0 10
\d+ part_document
                    Partitioned table "regress_rls_schema.part_document"
 Column  |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
---------+---------+-----------+----------+---------+----------+--------------+-------------
 did     | integer |           |          |         | plain    |              | 
 cid     | integer |           |          |         | plain    |              | 
 dlevel  | integer |           | not null |         | plain    |              | 
 dauthor | name    |           |          |         | plain    |              | 
 dtitle  | text    |           |          |         | extended |              | 
Partition key: RANGE (cid)
Partitions: part_document_fiction FOR VALUES FROM (11) TO (12),
            part_document_nonfiction FOR VALUES FROM (99) TO (100),
            part_document_satire FOR VALUES FROM (55) TO (56)

SELECT * FROM pg_policies WHERE schemaname = 'regress_rls_schema' AND tablename like '%part_document%' ORDER BY policyname;
 schemaname | tablename | policyname | permissive | roles | cmd | qual | with_check 
------------+-----------+------------+------------+-------+-----+------+------------
(0 rows)

-- viewpoint from regress_rls_bob
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:266: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
(10 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- viewpoint from regress_rls_carol
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:271: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
(10 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- viewpoint from regress_rls_dave
SET SESSION AUTHORIZATION regress_rls_dave;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:276: NOTICE:  f_leak => awesome technology book
 did | cid | dlevel |      dauthor      |         dtitle          
-----+-----+--------+-------------------+-------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
(10 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- pp1 ERROR
INSERT INTO part_document VALUES (100, 11, 5, 'regress_rls_dave', 'testing pp1'); -- fail
INSERT 0 1
-- pp1r ERROR
INSERT INTO part_document VALUES (100, 99, 1, 'regress_rls_dave', 'testing pp1r'); -- fail
INSERT 0 1
-- Show that RLS policy does not apply for direct inserts to children
-- This should fail with RLS POLICY pp1r violation.
INSERT INTO part_document VALUES (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'); -- fail
INSERT 0 1
-- But this should succeed.
INSERT INTO part_document_satire VALUES (100, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'); -- success
INSERT 0 1
-- We still cannot see the row using the parent
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => testing pp1
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:290: NOTICE:  f_leak => testing pp1r
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(14 rows)

-- But we can if we look directly
SELECT * FROM part_document_satire WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:292: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:292: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:292: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:292: NOTICE:  f_leak => testing RLS with partitions
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(4 rows)

-- Turn on RLS and create policy on child to show RLS is checked before constraints
SET SESSION AUTHORIZATION regress_rls_alice;
SET
-- This should fail with RLS violation now.
SET SESSION AUTHORIZATION regress_rls_dave;
SET
INSERT INTO part_document_satire VALUES (101, 55, 1, 'regress_rls_dave', 'testing RLS with partitions'); -- fail
INSERT 0 1
-- And now we cannot see directly into the partition either, due to RLS
-- will crash: SELECT * FROM part_document_satire WHERE f_leak(dtitle) ORDER BY did;
-- The parent looks same as before
-- viewpoint from regress_rls_dave
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => testing pp1
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:303: NOTICE:  f_leak => testing pp1r
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(15 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- viewpoint from regress_rls_carol
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => testing pp1
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:308: NOTICE:  f_leak => testing pp1r
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(15 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

SET SESSION AUTHORIZATION regress_rls_alice;
SET
-- viewpoint from regress_rls_bob again
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => testing pp1
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:315: NOTICE:  f_leak => testing pp1r
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(15 rows)

-- viewpoint from rls_regres_carol again
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM part_document WHERE f_leak(dtitle) ORDER BY did;
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => my first novel
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => my second novel
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => great science fiction
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => awesome science fiction
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => testing pp1
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => my first satire
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => great satire
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => testing RLS with partitions
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => my science textbook
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => my history book
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => great technology book
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => awesome technology book
psql:sql/rowsecurity.sql:319: NOTICE:  f_leak => testing pp1r
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(15 rows)

EXPLAIN (COSTS OFF) SELECT * FROM part_document WHERE f_leak(dtitle);

-- database superuser does bypass RLS policy when enabled
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO ON;
SET
--SELECT * FROM part_document ORDER BY did;
SELECT * FROM part_document ORDER BY did,cid,dlevel,dauthor,dtitle;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(15 rows)

SELECT * FROM part_document_satire ORDER by did;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(5 rows)

-- database non-superuser with bypass privilege can bypass RLS policy when disabled
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
--SELECT * FROM part_document ORDER BY did;
SELECT * FROM part_document ORDER BY did,cid,dlevel,dauthor,dtitle;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(15 rows)

SELECT * FROM part_document_satire ORDER by did;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(5 rows)

-- RLS policy does not apply to table owner when RLS enabled.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
--SELECT * FROM part_document ORDER by did;
SELECT * FROM part_document ORDER by did,cid,dlevel,dauthor,dtitle;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(15 rows)

SELECT * FROM part_document_satire ORDER by did;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(5 rows)

-- When RLS disabled, other users get ERROR.
SET SESSION AUTHORIZATION regress_rls_dave;
SET
SET row_security TO OFF;
SET
--SELECT * FROM part_document ORDER by did;
SELECT * FROM part_document ORDER by did,cid,dlevel,dauthor,dtitle;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   1 |  11 |      1 | regress_rls_bob   | my first novel
   2 |  11 |      2 | regress_rls_bob   | my second novel
   3 |  99 |      2 | regress_rls_bob   | my science textbook
   4 |  55 |      1 | regress_rls_bob   | my first satire
   5 |  99 |      2 | regress_rls_bob   | my history book
   6 |  11 |      1 | regress_rls_carol | great science fiction
   7 |  99 |      2 | regress_rls_carol | great technology book
   8 |  55 |      2 | regress_rls_carol | great satire
   9 |  11 |      1 | regress_rls_dave  | awesome science fiction
  10 |  99 |      2 | regress_rls_dave  | awesome technology book
 100 |  11 |      5 | regress_rls_dave  | testing pp1
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  99 |      1 | regress_rls_dave  | testing pp1r
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(15 rows)

SELECT * FROM part_document_satire ORDER by did;
 did | cid | dlevel |      dauthor      |           dtitle            
-----+-----+--------+-------------------+-----------------------------
   4 |  55 |      1 | regress_rls_bob   | my first satire
   8 |  55 |      2 | regress_rls_carol | great satire
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 100 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
 101 |  55 |      1 | regress_rls_dave  | testing RLS with partitions
(5 rows)

-- Check behavior with a policy that uses a SubPlan not an InitPlan.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
SET SESSION AUTHORIZATION regress_rls_carol;
SET
INSERT INTO part_document VALUES (100, 11, 5, 'regress_rls_carol', 'testing pp3'); -- fail
INSERT 0 1
----- Dependencies -----
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security TO ON;
SET
CREATE TABLE dependee (x integer, y integer);
CREATE TABLE
CREATE TABLE dependent (x integer, y integer);
CREATE TABLE
DROP TABLE dependee; -- Should fail without CASCADE due to dependency on row security qual?
DROP TABLE
DROP TABLE dependee CASCADE;
psql:sql/rowsecurity.sql:368: ERROR:  table "dependee" does not exist
EXPLAIN (COSTS OFF) SELECT * FROM dependent; -- After drop, should be unqualified

-----   RECURSION    ----
--
-- Simple recursion
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE rec1 (x integer, y integer);
CREATE TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rec1; -- fail, direct recursion
psql:sql/rowsecurity.sql:380: ERROR:  permission denied for table rec1
--
-- Mutual recursion
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE rec2 (a integer, b integer);
CREATE TABLE
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rec1;    -- fail, mutual recursion
psql:sql/rowsecurity.sql:389: ERROR:  permission denied for table rec1
--
-- Mutual recursion via views
--
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE VIEW rec1v AS SELECT * FROM rec1;
CREATE VIEW
CREATE VIEW rec2v AS SELECT * FROM rec2;
CREATE VIEW
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rec1;    -- fail, mutual recursion via views
psql:sql/rowsecurity.sql:400: ERROR:  permission denied for table rec1
--
-- Mutual recursion via .s.b views
--
SET SESSION AUTHORIZATION regress_rls_bob;
SET
\set VERBOSITY terse \\ -- suppress cascade details
DROP VIEW rec1v, rec2v CASCADE;
DROP VIEW
\set VERBOSITY default
CREATE VIEW rec1v WITH (security_barrier) AS SELECT * FROM rec1;
CREATE VIEW
CREATE VIEW rec2v WITH (security_barrier) AS SELECT * FROM rec2;
CREATE VIEW
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rec1;    -- fail, mutual recursion via s.b. views
psql:sql/rowsecurity.sql:416: ERROR:  permission denied for table rec1
--
-- recursive RLS and VIEWs in policy
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE s1 (a int, b text);
CREATE TABLE
INSERT INTO s1 (SELECT x, md5(x::text) FROM generate_series(-10,10) x);
INSERT 0 21
CREATE TABLE s2 (x int, y text);
CREATE TABLE
INSERT INTO s2 (SELECT x, md5(x::text) FROM generate_series(-6,6) x);
INSERT 0 13
GRANT SELECT ON s1, s2 TO regress_rls_bob;
GRANT
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE VIEW v2 AS SELECT * FROM s2 WHERE y like '%af%';
CREATE VIEW
SELECT * FROM s1 WHERE f_leak(b); -- fail (infinite recursion)
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 1b0fd9efa5279c4203b7c70233f86dbf
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 252e691406782824eec43d7eadc3d256
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => a8d2ec85eaf98407310b72eb73dda247
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 74687a12d3915d3c4d83f1af7b3683d5
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 596a3d04481816330f07e4f97510c28f
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 47c1b025fa18ea96c33fbb6718688c0f
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 0267aaf632e87a63288a08331f22c7c3
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => b3149ecea4628efd23d2f86e5a723472
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 5d7b9adcbe1c629ec722529dd12e5129
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 6bb61e3b7bce0931da574d19d1d82c88
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => c4ca4238a0b923820dcc509a6f75849b
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => e4da3b7fbbce2345d7772b0674a318d5
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 8f14e45fceea167a5a36dedd4bea2543
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:432: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
  a  |                b                 
-----+----------------------------------
 -10 | 1b0fd9efa5279c4203b7c70233f86dbf
  -9 | 252e691406782824eec43d7eadc3d256
  -8 | a8d2ec85eaf98407310b72eb73dda247
  -7 | 74687a12d3915d3c4d83f1af7b3683d5
  -6 | 596a3d04481816330f07e4f97510c28f
  -5 | 47c1b025fa18ea96c33fbb6718688c0f
  -4 | 0267aaf632e87a63288a08331f22c7c3
  -3 | b3149ecea4628efd23d2f86e5a723472
  -2 | 5d7b9adcbe1c629ec722529dd12e5129
  -1 | 6bb61e3b7bce0931da574d19d1d82c88
   0 | cfcd208495d565ef66e7dff9f98764da
   1 | c4ca4238a0b923820dcc509a6f75849b
   2 | c81e728d9d4c2f636f067f89cc14862c
   3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
   4 | a87ff679a2f3e71d9181a67b7542122c
   5 | e4da3b7fbbce2345d7772b0674a318d5
   6 | 1679091c5a880faf6fb5e6087eb1b2dc
   7 | 8f14e45fceea167a5a36dedd4bea2543
   8 | c9f0f895fb98ab9159f51fd0297e236d
   9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
  10 | d3d9446802a44259755d38e6d163e820
(21 rows)

INSERT INTO s1 VALUES (1, 'foo'); -- fail (infinite recursion)
psql:sql/rowsecurity.sql:434: ERROR:  permission denied for table s1
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM s1 WHERE f_leak(b);	-- OK
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 1b0fd9efa5279c4203b7c70233f86dbf
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 252e691406782824eec43d7eadc3d256
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => a8d2ec85eaf98407310b72eb73dda247
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 74687a12d3915d3c4d83f1af7b3683d5
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 596a3d04481816330f07e4f97510c28f
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 47c1b025fa18ea96c33fbb6718688c0f
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 0267aaf632e87a63288a08331f22c7c3
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => b3149ecea4628efd23d2f86e5a723472
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 5d7b9adcbe1c629ec722529dd12e5129
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 6bb61e3b7bce0931da574d19d1d82c88
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => c4ca4238a0b923820dcc509a6f75849b
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => e4da3b7fbbce2345d7772b0674a318d5
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 8f14e45fceea167a5a36dedd4bea2543
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:439: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
  a  |                b                 
-----+----------------------------------
 -10 | 1b0fd9efa5279c4203b7c70233f86dbf
  -9 | 252e691406782824eec43d7eadc3d256
  -8 | a8d2ec85eaf98407310b72eb73dda247
  -7 | 74687a12d3915d3c4d83f1af7b3683d5
  -6 | 596a3d04481816330f07e4f97510c28f
  -5 | 47c1b025fa18ea96c33fbb6718688c0f
  -4 | 0267aaf632e87a63288a08331f22c7c3
  -3 | b3149ecea4628efd23d2f86e5a723472
  -2 | 5d7b9adcbe1c629ec722529dd12e5129
  -1 | 6bb61e3b7bce0931da574d19d1d82c88
   0 | cfcd208495d565ef66e7dff9f98764da
   1 | c4ca4238a0b923820dcc509a6f75849b
   2 | c81e728d9d4c2f636f067f89cc14862c
   3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
   4 | a87ff679a2f3e71d9181a67b7542122c
   5 | e4da3b7fbbce2345d7772b0674a318d5
   6 | 1679091c5a880faf6fb5e6087eb1b2dc
   7 | 8f14e45fceea167a5a36dedd4bea2543
   8 | c9f0f895fb98ab9159f51fd0297e236d
   9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
  10 | d3d9446802a44259755d38e6d163e820
(21 rows)

EXPLAIN (COSTS OFF) SELECT * FROM only s1 WHERE f_leak(b);

SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM s1 WHERE f_leak(b);	-- OK
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 1b0fd9efa5279c4203b7c70233f86dbf
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 252e691406782824eec43d7eadc3d256
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => a8d2ec85eaf98407310b72eb73dda247
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 74687a12d3915d3c4d83f1af7b3683d5
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 596a3d04481816330f07e4f97510c28f
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 47c1b025fa18ea96c33fbb6718688c0f
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 0267aaf632e87a63288a08331f22c7c3
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => b3149ecea4628efd23d2f86e5a723472
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 5d7b9adcbe1c629ec722529dd12e5129
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 6bb61e3b7bce0931da574d19d1d82c88
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => c4ca4238a0b923820dcc509a6f75849b
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => e4da3b7fbbce2345d7772b0674a318d5
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 8f14e45fceea167a5a36dedd4bea2543
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:444: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
  a  |                b                 
-----+----------------------------------
 -10 | 1b0fd9efa5279c4203b7c70233f86dbf
  -9 | 252e691406782824eec43d7eadc3d256
  -8 | a8d2ec85eaf98407310b72eb73dda247
  -7 | 74687a12d3915d3c4d83f1af7b3683d5
  -6 | 596a3d04481816330f07e4f97510c28f
  -5 | 47c1b025fa18ea96c33fbb6718688c0f
  -4 | 0267aaf632e87a63288a08331f22c7c3
  -3 | b3149ecea4628efd23d2f86e5a723472
  -2 | 5d7b9adcbe1c629ec722529dd12e5129
  -1 | 6bb61e3b7bce0931da574d19d1d82c88
   0 | cfcd208495d565ef66e7dff9f98764da
   1 | c4ca4238a0b923820dcc509a6f75849b
   2 | c81e728d9d4c2f636f067f89cc14862c
   3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
   4 | a87ff679a2f3e71d9181a67b7542122c
   5 | e4da3b7fbbce2345d7772b0674a318d5
   6 | 1679091c5a880faf6fb5e6087eb1b2dc
   7 | 8f14e45fceea167a5a36dedd4bea2543
   8 | c9f0f895fb98ab9159f51fd0297e236d
   9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
  10 | d3d9446802a44259755d38e6d163e820
(21 rows)

EXPLAIN (COSTS OFF) SELECT * FROM s1 WHERE f_leak(b);

SELECT (SELECT x FROM s1 LIMIT 1) xx, * FROM s2 WHERE y like '%28%';
 xx | x  |                y                 
----+----+----------------------------------
 -6 | -6 | 596a3d04481816330f07e4f97510c28f
 -4 | -4 | 0267aaf632e87a63288a08331f22c7c3
 -3 | -3 | b3149ecea4628efd23d2f86e5a723472
  2 |  2 | c81e728d9d4c2f636f067f89cc14862c
  3 |  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
(5 rows)

EXPLAIN (COSTS OFF) SELECT (SELECT x FROM s1 LIMIT 1) xx, * FROM s2 WHERE y like '%28%';

SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM s1 WHERE f_leak(b);	-- fail (infinite recursion via view)
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 1b0fd9efa5279c4203b7c70233f86dbf
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 252e691406782824eec43d7eadc3d256
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => a8d2ec85eaf98407310b72eb73dda247
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 74687a12d3915d3c4d83f1af7b3683d5
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 596a3d04481816330f07e4f97510c28f
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 47c1b025fa18ea96c33fbb6718688c0f
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 0267aaf632e87a63288a08331f22c7c3
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => b3149ecea4628efd23d2f86e5a723472
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 5d7b9adcbe1c629ec722529dd12e5129
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 6bb61e3b7bce0931da574d19d1d82c88
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => c4ca4238a0b923820dcc509a6f75849b
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => e4da3b7fbbce2345d7772b0674a318d5
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 8f14e45fceea167a5a36dedd4bea2543
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:452: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
  a  |                b                 
-----+----------------------------------
 -10 | 1b0fd9efa5279c4203b7c70233f86dbf
  -9 | 252e691406782824eec43d7eadc3d256
  -8 | a8d2ec85eaf98407310b72eb73dda247
  -7 | 74687a12d3915d3c4d83f1af7b3683d5
  -6 | 596a3d04481816330f07e4f97510c28f
  -5 | 47c1b025fa18ea96c33fbb6718688c0f
  -4 | 0267aaf632e87a63288a08331f22c7c3
  -3 | b3149ecea4628efd23d2f86e5a723472
  -2 | 5d7b9adcbe1c629ec722529dd12e5129
  -1 | 6bb61e3b7bce0931da574d19d1d82c88
   0 | cfcd208495d565ef66e7dff9f98764da
   1 | c4ca4238a0b923820dcc509a6f75849b
   2 | c81e728d9d4c2f636f067f89cc14862c
   3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
   4 | a87ff679a2f3e71d9181a67b7542122c
   5 | e4da3b7fbbce2345d7772b0674a318d5
   6 | 1679091c5a880faf6fb5e6087eb1b2dc
   7 | 8f14e45fceea167a5a36dedd4bea2543
   8 | c9f0f895fb98ab9159f51fd0297e236d
   9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
  10 | d3d9446802a44259755d38e6d163e820
(21 rows)

-- prepared statement with regress_rls_alice privilege
PREPARE p1(int) AS SELECT * FROM t1 WHERE a <= $1;
PREPARE
EXECUTE p1(2);
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) EXECUTE p1(2);

-- superuser is allowed to bypass RLS checks
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
SELECT * FROM t1 WHERE f_leak(b);
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1 WHERE f_leak(b);

-- plan cache should be invalidated
EXECUTE p1(2);
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) EXECUTE p1(2);

PREPARE p2(int) AS SELECT * FROM t1 WHERE a = $1;
PREPARE
EXECUTE p2(2);
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) EXECUTE p2(2);

-- also, case when privilege switch from superuser
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
EXECUTE p2(2);
 a | b 
---+---
(0 rows)

EXPLAIN (COSTS OFF) EXECUTE p2(2);

--
-- UPDATE / DELETE and Row-level security
-- where clause using function not supported in kunlun, comment below:
--SET SESSION AUTHORIZATION regress_rls_bob;
--EXPLAIN (COSTS OFF) UPDATE t1 SET b = b || b WHERE f_leak(b);
--UPDATE t1 SET b = b || b WHERE f_leak(b);
--EXPLAIN (COSTS OFF) UPDATE only t1 SET b = b || '_updt' WHERE f_leak(b);
--UPDATE only t1 SET b = b || '_updt' WHERE f_leak(b);
-- returning clause with system column
--UPDATE t1 SET b = b WHERE f_leak(b) RETURNING *;
--EXPLAIN (COSTS OFF) UPDATE t1 t1_1 SET b = t1_2.b FROM t1 t1_2
--WHERE t1_1.a = 4 AND t1_2.a = t1_1.a AND t1_2.b = t1_1.b
--AND f_leak(t1_1.b) AND f_leak(t1_2.b) RETURNING *, t1_1, t1_2;
--UPDATE t1 t1_1 SET b = t1_2.b FROM t1 t1_2
--WHERE t1_1.a = 4 AND t1_2.a = t1_1.a AND t1_2.b = t1_1.b
--AND f_leak(t1_1.b) AND f_leak(t1_2.b) RETURNING *, t1_1, t1_2;
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
SELECT * FROM t1 ORDER BY a,b;
 a | b 
---+---
(0 rows)

SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
--delete/update不支持用户自定义函数，或者mysql不支持的函数 #777									 
--EXPLAIN (COSTS OFF) DELETE FROM only t1 WHERE f_leak(b);
--EXPLAIN (COSTS OFF) DELETE FROM t1 WHERE f_leak(b);
--
-- S.b. view on top of Row-level security
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE b1 (a int, b text);
CREATE TABLE
INSERT INTO b1 (SELECT x, md5(x::text) FROM generate_series(-10,10) x);
INSERT 0 21
GRANT ALL ON b1 TO regress_rls_bob;
GRANT
SET SESSION AUTHORIZATION regress_rls_bob;
SET
--CREATE VIEW bv1 WITH (security_barrier) AS SELECT * FROM b1 WHERE a > 0 WITH CHECK OPTION;
--views with CHECK options are not supported
CREATE VIEW bv1 WITH (security_barrier) AS SELECT * FROM b1 WHERE a > 0;
CREATE VIEW
GRANT ALL ON bv1 TO regress_rls_carol;
GRANT
SET SESSION AUTHORIZATION regress_rls_carol;
SET
EXPLAIN (COSTS OFF) SELECT * FROM bv1 WHERE f_leak(b);

SELECT * FROM bv1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => c4ca4238a0b923820dcc509a6f75849b
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => e4da3b7fbbce2345d7772b0674a318d5
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => 8f14e45fceea167a5a36dedd4bea2543
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:528: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
 a  |                b                 
----+----------------------------------
  1 | c4ca4238a0b923820dcc509a6f75849b
  2 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  4 | a87ff679a2f3e71d9181a67b7542122c
  5 | e4da3b7fbbce2345d7772b0674a318d5
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  7 | 8f14e45fceea167a5a36dedd4bea2543
  8 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 10 | d3d9446802a44259755d38e6d163e820
(10 rows)

INSERT INTO bv1 VALUES (-1, 'xxx'); -- should fail view WCO
INSERT 0 1
INSERT INTO bv1 VALUES (11, 'xxx'); -- should fail RLS check
INSERT 0 1
INSERT INTO bv1 VALUES (12, 'xxx'); -- ok
INSERT 0 1
--EXPLAIN (COSTS OFF) UPDATE bv1 SET b = 'yyy' WHERE a = 4 AND f_leak(b);
--UPDATE bv1 SET b = 'yyy' WHERE a = 4 AND f_leak(b);
--EXPLAIN (COSTS OFF) DELETE FROM bv1 WHERE a = 6 AND f_leak(b);
--DELETE FROM bv1 WHERE a = 6 AND f_leak(b);
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM b1;
  a  |                b                 
-----+----------------------------------
 -10 | 1b0fd9efa5279c4203b7c70233f86dbf
  -9 | 252e691406782824eec43d7eadc3d256
  -8 | a8d2ec85eaf98407310b72eb73dda247
  -7 | 74687a12d3915d3c4d83f1af7b3683d5
  -6 | 596a3d04481816330f07e4f97510c28f
  -5 | 47c1b025fa18ea96c33fbb6718688c0f
  -4 | 0267aaf632e87a63288a08331f22c7c3
  -3 | b3149ecea4628efd23d2f86e5a723472
  -2 | 5d7b9adcbe1c629ec722529dd12e5129
  -1 | 6bb61e3b7bce0931da574d19d1d82c88
   0 | cfcd208495d565ef66e7dff9f98764da
   1 | c4ca4238a0b923820dcc509a6f75849b
   2 | c81e728d9d4c2f636f067f89cc14862c
   3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
   4 | a87ff679a2f3e71d9181a67b7542122c
   5 | e4da3b7fbbce2345d7772b0674a318d5
   6 | 1679091c5a880faf6fb5e6087eb1b2dc
   7 | 8f14e45fceea167a5a36dedd4bea2543
   8 | c9f0f895fb98ab9159f51fd0297e236d
   9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
  10 | d3d9446802a44259755d38e6d163e820
  -1 | xxx
  11 | xxx
  12 | xxx
(24 rows)

--
-- INSERT ... ON CONFLICT DO UPDATE and Row-level security
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Exists...
SELECT * FROM document WHERE did = 2;
 did | cid | dlevel |     dauthor     |     dtitle      
-----+-----+--------+-----------------+-----------------
   2 |  11 |      2 | regress_rls_bob | my second novel
(1 row)

-- ...so violates actual WITH CHECK OPTION within UPDATE (not INSERT, since
-- alternative UPDATE path happens to be taken):
INSERT INTO document VALUES (2, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_carol', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, dauthor = EXCLUDED.dauthor;
INSERT 0 2
-- Violates USING qual for UPDATE policy p3.
--
-- UPDATE path is taken, but UPDATE fails purely because *existing* row to be
-- updated is not a "novel"/cid 11 (row is not leaked, even though we have
-- SELECT privileges sufficient to see the row in this instance):
INSERT INTO document VALUES (33, 22, 1, 'regress_rls_bob', 'okay science fiction'); -- preparation for next statement
INSERT 0 1
INSERT INTO document VALUES (33, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'Some novel, replaces sci-fi') -- takes UPDATE path
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle;
INSERT 0 2
-- Fine (we UPDATE, since INSERT WCOs and UPDATE security barrier quals + WCOs
-- not violated):
INSERT INTO document VALUES (2, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle RETURNING *;
 did | cid | dlevel |     dauthor     |     dtitle     
-----+-----+--------+-----------------+----------------
   2 |  11 |      1 | regress_rls_bob | my first novel
(1 row)

INSERT 0 0
-- Fine (we INSERT, so "cid = 33" ("technology") isn't evaluated):
INSERT INTO document VALUES (78, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'some technology novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, cid = 33 RETURNING *;
 did | cid | dlevel |     dauthor     |        dtitle         
-----+-----+--------+-----------------+-----------------------
  78 |  11 |      1 | regress_rls_bob | some technology novel
(1 row)

INSERT 0 1
-- Fine (same query, but we UPDATE, so "cid = 33", ("technology") is not the
-- case in respect of *existing* tuple):
INSERT INTO document VALUES (78, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'some technology novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, cid = 33 RETURNING *;
 did | cid | dlevel |     dauthor     |        dtitle         
-----+-----+--------+-----------------+-----------------------
  78 |  11 |      1 | regress_rls_bob | some technology novel
(1 row)

INSERT 0 2
-- Same query a third time, but now fails due to existing tuple finally not
-- passing quals:
INSERT INTO document VALUES (78, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'some technology novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, cid = 33 RETURNING *;
 did | cid | dlevel |     dauthor     |        dtitle         
-----+-----+--------+-----------------+-----------------------
  78 |  11 |      1 | regress_rls_bob | some technology novel
(1 row)

INSERT 0 0
-- Don't fail just because INSERT doesn't satisfy WITH CHECK option that
-- originated as a barrier/USING() qual from the UPDATE.  Note that the UPDATE
-- path *isn't* taken, and so UPDATE-related policy does not apply:
INSERT INTO document VALUES (79, (SELECT cid from category WHERE cname = 'technology'), 1, 'regress_rls_bob', 'technology book, can only insert')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle RETURNING *;
 did | cid | dlevel |     dauthor     |              dtitle              
-----+-----+--------+-----------------+----------------------------------
  79 |  33 |      1 | regress_rls_bob | technology book, can only insert
(1 row)

INSERT 0 1
-- But this time, the same statement fails, because the UPDATE path is taken,
-- and updating the row just inserted falls afoul of security barrier qual
-- (enforced as WCO) -- what we might have updated target tuple to is
-- irrelevant, in fact.
INSERT INTO document VALUES (79, (SELECT cid from category WHERE cname = 'technology'), 1, 'regress_rls_bob', 'technology book, can only insert')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle RETURNING *;
 did | cid | dlevel |     dauthor     |              dtitle              
-----+-----+--------+-----------------+----------------------------------
  79 |  33 |      1 | regress_rls_bob | technology book, can only insert
(1 row)

INSERT 0 0
-- Test default USING qual enforced as WCO
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Just because WCO-style enforcement of USING quals occurs with
-- existing/target tuple does not mean that the implementation can be allowed
-- to fail to also enforce this qual against the final tuple appended to
-- relation (since in the absence of an explicit WCO, this is also interpreted
-- as an UPDATE/ALL WCO in general).
--
-- UPDATE path is taken here (fails due to existing tuple).  Note that this is
-- not reported as a "USING expression", because it's an RLS UPDATE check that originated as
-- a USING qual for the purposes of RLS in general, as opposed to an explicit
-- USING qual that is ordinarily a security barrier.  We leave it up to the
-- UPDATE to make this fail:
INSERT INTO document VALUES (79, (SELECT cid from category WHERE cname = 'technology'), 1, 'regress_rls_bob', 'technology book, can only insert')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle RETURNING *;
 did | cid | dlevel |     dauthor     |              dtitle              
-----+-----+--------+-----------------+----------------------------------
  79 |  33 |      1 | regress_rls_bob | technology book, can only insert
(1 row)

INSERT 0 0
-- UPDATE path is taken here.  Existing tuple passes, since its cid
-- corresponds to "novel", but default USING qual is enforced against
-- post-UPDATE tuple too (as always when updating with a policy that lacks an
-- explicit WCO), and so this fails:
INSERT INTO document VALUES (2, (SELECT cid from category WHERE cname = 'technology'), 1, 'regress_rls_bob', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET cid = EXCLUDED.cid, dtitle = EXCLUDED.dtitle RETURNING *;
 did | cid | dlevel |     dauthor     |     dtitle     
-----+-----+--------+-----------------+----------------
   2 |  33 |      1 | regress_rls_bob | my first novel
(1 row)

INSERT 0 2
SET SESSION AUTHORIZATION regress_rls_alice;
SET
--
-- Test ALL policies with ON CONFLICT DO UPDATE (much the same as existing UPDATE
-- tests)
--
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Fails, since ALL WCO is enforced in insert path:
INSERT INTO document VALUES (80, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_carol', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle, cid = 33;
INSERT 0 1
-- Fails, since ALL policy USING qual is enforced (existing, target tuple is in
-- violation, since it has the "manga" cid):
INSERT INTO document VALUES (4, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dtitle = EXCLUDED.dtitle;
INSERT 0 2
-- Fails, since ALL WCO are enforced:
INSERT INTO document VALUES (1, (SELECT cid from category WHERE cname = 'novel'), 1, 'regress_rls_bob', 'my first novel')
    ON CONFLICT (did) DO UPDATE SET dauthor = 'regress_rls_carol';
INSERT 0 2
--
-- ROLE/GROUP
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE z1 (a int, b text);
CREATE TABLE
CREATE TABLE z2 (a int, b text);
CREATE TABLE
GRANT SELECT ON z1,z2 TO regress_rls_group1, regress_rls_group2,
    regress_rls_bob, regress_rls_carol;
GRANT
INSERT INTO z1 VALUES
    (1, 'aba'),
    (2, 'bbb'),
    (3, 'ccc'),
    (4, 'dad');
INSERT 0 4
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM z1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:654: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:654: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:654: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:654: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM z1 WHERE f_leak(b);

PREPARE plancache_test AS SELECT * FROM z1 WHERE f_leak(b);
PREPARE
EXPLAIN (COSTS OFF) EXECUTE plancache_test;

SET ROLE regress_rls_group1;
SET
SELECT * FROM z1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:661: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:661: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:661: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:661: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM z1 WHERE f_leak(b);

EXPLAIN (COSTS OFF) EXECUTE plancache_test;

SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM z1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:667: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:667: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:667: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:667: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM z1 WHERE f_leak(b);

EXPLAIN (COSTS OFF) EXECUTE plancache_test;

SET ROLE regress_rls_group2;
SET
SELECT * FROM z1 WHERE f_leak(b);
psql:sql/rowsecurity.sql:673: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:673: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:673: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:673: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM z1 WHERE f_leak(b);

EXPLAIN (COSTS OFF) EXECUTE plancache_test;

--
-- Views should follow policy for view owner.
--
-- View and Table owner are the same.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE VIEW rls_view AS SELECT * FROM z1 WHERE f_leak(b);
CREATE VIEW
GRANT SELECT ON rls_view TO regress_rls_bob;
GRANT
-- Query as role that is not owner of view or table.  Should return all records.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:688: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:688: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:688: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:688: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

-- Query as view/table owner.  Should return all records.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:693: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:693: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:693: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:693: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

DROP VIEW rls_view;
DROP VIEW
-- View and Table owners are different.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE VIEW rls_view AS SELECT * FROM z1 WHERE f_leak(b);
CREATE VIEW
GRANT SELECT ON rls_view TO regress_rls_alice;
GRANT
-- Query as role that is not owner of view but is owner of table.
-- Should return records based on view owner policies.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:705: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:705: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:705: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:705: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

-- Query as role that is not owner of table but is owner of view.
-- Should return records based on view owner policies.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:711: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:711: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:711: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:711: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

-- Query as role that is not the owner of the table or view without permissions.
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SELECT * FROM rls_view; --fail - permission denied.
psql:sql/rowsecurity.sql:716: ERROR:  permission denied for view rls_view
EXPLAIN (COSTS OFF) SELECT * FROM rls_view; --fail - permission denied.
psql:sql/rowsecurity.sql:717: ERROR:  permission denied for view rls_view
-- Query as role that is not the owner of the table or view with permissions.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
GRANT SELECT ON rls_view TO regress_rls_carol;
GRANT
SELECT * FROM rls_view;
psql:sql/rowsecurity.sql:722: NOTICE:  f_leak => aba
psql:sql/rowsecurity.sql:722: NOTICE:  f_leak => bbb
psql:sql/rowsecurity.sql:722: NOTICE:  f_leak => ccc
psql:sql/rowsecurity.sql:722: NOTICE:  f_leak => dad
 a |  b  
---+-----
 1 | aba
 2 | bbb
 3 | ccc
 4 | dad
(4 rows)

EXPLAIN (COSTS OFF) SELECT * FROM rls_view;

SET SESSION AUTHORIZATION regress_rls_bob;
SET
DROP VIEW rls_view;
DROP VIEW
--
-- Command specific
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE x1 (a int, b text, c text);
CREATE TABLE
GRANT ALL ON x1 TO PUBLIC;
GRANT
INSERT INTO x1 VALUES
    (1, 'abc', 'regress_rls_bob'),
    (2, 'bcd', 'regress_rls_bob'),
    (3, 'cde', 'regress_rls_carol'),
    (4, 'def', 'regress_rls_carol'),
    (5, 'efg', 'regress_rls_bob'),
    (6, 'fgh', 'regress_rls_bob'),
    (7, 'fgh', 'regress_rls_carol'),
    (8, 'fgh', 'regress_rls_carol');
INSERT 0 8
--SET SESSION AUTHORIZATION regress_rls_bob;
--SELECT * FROM x1 WHERE f_leak(b) ORDER BY a ASC;
--UPDATE x1 SET b = b || '_updt' WHERE f_leak(b) RETURNING *;
--SET SESSION AUTHORIZATION regress_rls_carol;
--SELECT * FROM x1 WHERE f_leak(b) ORDER BY a ASC;
--UPDATE x1 SET b = b || '_updt' WHERE f_leak(b) RETURNING *;
--DELETE FROM x1 WHERE f_leak(b) RETURNING *;
--
-- Duplicate Policy Names
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE y1 (a int, b text);
CREATE TABLE
CREATE TABLE y2 (a int, b text);
CREATE TABLE
GRANT ALL ON y1, y2 TO regress_rls_bob;
GRANT
--
-- Expression structure with SBV
--
-- Create view as table owner.  RLS should NOT be applied.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE VIEW rls_sbv WITH (security_barrier) AS
    SELECT * FROM y1 WHERE f_leak(b);
CREATE VIEW
EXPLAIN (COSTS OFF) SELECT * FROM rls_sbv WHERE (a = 1);

DROP VIEW rls_sbv;
DROP VIEW
-- Create view as role that does not own table.  RLS should be applied.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE VIEW rls_sbv WITH (security_barrier) AS
    SELECT * FROM y1 WHERE f_leak(b);
CREATE VIEW
EXPLAIN (COSTS OFF) SELECT * FROM rls_sbv WHERE (a = 1);

DROP VIEW rls_sbv;
DROP VIEW
--
-- Expression structure
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
INSERT INTO y2 (SELECT x, md5(x::text) FROM generate_series(0,20) x);
INSERT 0 21
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM y2 WHERE f_leak(b);
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => c4ca4238a0b923820dcc509a6f75849b
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => e4da3b7fbbce2345d7772b0674a318d5
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 8f14e45fceea167a5a36dedd4bea2543
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 6512bd43d9caa6e02c990b0a82652dca
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => c20ad4d76fe97759aa27a0c99bff6710
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => c51ce410c124a10e0db5e4b97fc2af39
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => aab3238922bcc25a6f606eb525ffdc56
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 9bf31c7ff062936a96d3c8bd1f8f2ff3
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => c74d97b01eae257e44aa9d5bade97baf
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 70efdf2ec9b086079795c442636b55fb
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 6f4922f45568161a8cdf4ad2299f6d23
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 1f0e3dad99908345f7439f8ffabdffc4
psql:sql/rowsecurity.sql:787: NOTICE:  f_leak => 98f13708210194c475687be6106a3b84
 a  |                b                 
----+----------------------------------
  0 | cfcd208495d565ef66e7dff9f98764da
  1 | c4ca4238a0b923820dcc509a6f75849b
  2 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  4 | a87ff679a2f3e71d9181a67b7542122c
  5 | e4da3b7fbbce2345d7772b0674a318d5
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  7 | 8f14e45fceea167a5a36dedd4bea2543
  8 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 10 | d3d9446802a44259755d38e6d163e820
 11 | 6512bd43d9caa6e02c990b0a82652dca
 12 | c20ad4d76fe97759aa27a0c99bff6710
 13 | c51ce410c124a10e0db5e4b97fc2af39
 14 | aab3238922bcc25a6f606eb525ffdc56
 15 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 16 | c74d97b01eae257e44aa9d5bade97baf
 17 | 70efdf2ec9b086079795c442636b55fb
 18 | 6f4922f45568161a8cdf4ad2299f6d23
 19 | 1f0e3dad99908345f7439f8ffabdffc4
 20 | 98f13708210194c475687be6106a3b84
(21 rows)

EXPLAIN (COSTS OFF) SELECT * FROM y2 WHERE f_leak(b);

--
-- Qual push-down of leaky functions, when not referring to table
--
SELECT * FROM y2 WHERE f_leak('abc');
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:793: NOTICE:  f_leak => abc
 a  |                b                 
----+----------------------------------
  0 | cfcd208495d565ef66e7dff9f98764da
  1 | c4ca4238a0b923820dcc509a6f75849b
  2 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  4 | a87ff679a2f3e71d9181a67b7542122c
  5 | e4da3b7fbbce2345d7772b0674a318d5
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  7 | 8f14e45fceea167a5a36dedd4bea2543
  8 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 10 | d3d9446802a44259755d38e6d163e820
 11 | 6512bd43d9caa6e02c990b0a82652dca
 12 | c20ad4d76fe97759aa27a0c99bff6710
 13 | c51ce410c124a10e0db5e4b97fc2af39
 14 | aab3238922bcc25a6f606eb525ffdc56
 15 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 16 | c74d97b01eae257e44aa9d5bade97baf
 17 | 70efdf2ec9b086079795c442636b55fb
 18 | 6f4922f45568161a8cdf4ad2299f6d23
 19 | 1f0e3dad99908345f7439f8ffabdffc4
 20 | 98f13708210194c475687be6106a3b84
(21 rows)

EXPLAIN (COSTS OFF) SELECT * FROM y2 WHERE f_leak('abc');

CREATE TABLE test_qual_pushdown (
    abc text
);
CREATE TABLE
INSERT INTO test_qual_pushdown VALUES ('abc'),('def');
INSERT 0 2
SELECT * FROM y2 JOIN test_qual_pushdown ON (b = abc) WHERE f_leak(abc);
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => abc
psql:sql/rowsecurity.sql:802: NOTICE:  f_leak => def
 a | b | abc 
---+---+-----
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM y2 JOIN test_qual_pushdown ON (b = abc) WHERE f_leak(abc);

SELECT * FROM y2 JOIN test_qual_pushdown ON (b = abc) WHERE f_leak(b);
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => c4ca4238a0b923820dcc509a6f75849b
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => e4da3b7fbbce2345d7772b0674a318d5
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 8f14e45fceea167a5a36dedd4bea2543
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 6512bd43d9caa6e02c990b0a82652dca
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => c20ad4d76fe97759aa27a0c99bff6710
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => c51ce410c124a10e0db5e4b97fc2af39
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => aab3238922bcc25a6f606eb525ffdc56
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 9bf31c7ff062936a96d3c8bd1f8f2ff3
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => c74d97b01eae257e44aa9d5bade97baf
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 70efdf2ec9b086079795c442636b55fb
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 6f4922f45568161a8cdf4ad2299f6d23
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 1f0e3dad99908345f7439f8ffabdffc4
psql:sql/rowsecurity.sql:805: NOTICE:  f_leak => 98f13708210194c475687be6106a3b84
 a | b | abc 
---+---+-----
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM y2 JOIN test_qual_pushdown ON (b = abc) WHERE f_leak(b);

DROP TABLE test_qual_pushdown;
DROP TABLE
--
-- Plancache invalidate on user change.
--
RESET SESSION AUTHORIZATION;
RESET
\set VERBOSITY terse \\ -- suppress cascade details
DROP TABLE t1 CASCADE;
DROP TABLE
\set VERBOSITY default
CREATE TABLE t1 (a integer);
CREATE TABLE
GRANT SELECT ON t1 TO regress_rls_bob, regress_rls_carol;
GRANT
-- Prepare as regress_rls_bob
SET ROLE regress_rls_bob;
SET
PREPARE role_inval AS SELECT * FROM t1;
PREPARE
-- Check plan
EXPLAIN (COSTS OFF) EXECUTE role_inval;

-- Change to regress_rls_carol
SET ROLE regress_rls_carol;
SET
-- Check plan- should be different
EXPLAIN (COSTS OFF) EXECUTE role_inval;

-- Change back to regress_rls_bob
SET ROLE regress_rls_bob;
SET
-- Check plan- should be back to original
EXPLAIN (COSTS OFF) EXECUTE role_inval;

--
-- CTE and RLS
--
RESET SESSION AUTHORIZATION;
RESET
DROP TABLE t1 CASCADE;
DROP TABLE
CREATE TABLE t1 (a integer, b text);
CREATE TABLE
GRANT ALL ON t1 TO regress_rls_bob;
GRANT
INSERT INTO t1 (SELECT x, md5(x::text) FROM generate_series(0,20) x);
INSERT 0 21
SET SESSION AUTHORIZATION regress_rls_bob;
SET
WITH cte1 AS (SELECT * FROM t1 WHERE f_leak(b)) SELECT * FROM cte1;
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => cfcd208495d565ef66e7dff9f98764da
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => c4ca4238a0b923820dcc509a6f75849b
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => c81e728d9d4c2f636f067f89cc14862c
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => eccbc87e4b5ce2fe28308fd9f2a7baf3
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => a87ff679a2f3e71d9181a67b7542122c
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => e4da3b7fbbce2345d7772b0674a318d5
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 1679091c5a880faf6fb5e6087eb1b2dc
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 8f14e45fceea167a5a36dedd4bea2543
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => c9f0f895fb98ab9159f51fd0297e236d
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 45c48cce2e2d7fbdea1afc51c7c6ad26
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => d3d9446802a44259755d38e6d163e820
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 6512bd43d9caa6e02c990b0a82652dca
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => c20ad4d76fe97759aa27a0c99bff6710
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => c51ce410c124a10e0db5e4b97fc2af39
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => aab3238922bcc25a6f606eb525ffdc56
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 9bf31c7ff062936a96d3c8bd1f8f2ff3
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => c74d97b01eae257e44aa9d5bade97baf
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 70efdf2ec9b086079795c442636b55fb
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 6f4922f45568161a8cdf4ad2299f6d23
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 1f0e3dad99908345f7439f8ffabdffc4
psql:sql/rowsecurity.sql:851: NOTICE:  f_leak => 98f13708210194c475687be6106a3b84
 a  |                b                 
----+----------------------------------
  0 | cfcd208495d565ef66e7dff9f98764da
  1 | c4ca4238a0b923820dcc509a6f75849b
  2 | c81e728d9d4c2f636f067f89cc14862c
  3 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  4 | a87ff679a2f3e71d9181a67b7542122c
  5 | e4da3b7fbbce2345d7772b0674a318d5
  6 | 1679091c5a880faf6fb5e6087eb1b2dc
  7 | 8f14e45fceea167a5a36dedd4bea2543
  8 | c9f0f895fb98ab9159f51fd0297e236d
  9 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 10 | d3d9446802a44259755d38e6d163e820
 11 | 6512bd43d9caa6e02c990b0a82652dca
 12 | c20ad4d76fe97759aa27a0c99bff6710
 13 | c51ce410c124a10e0db5e4b97fc2af39
 14 | aab3238922bcc25a6f606eb525ffdc56
 15 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 16 | c74d97b01eae257e44aa9d5bade97baf
 17 | 70efdf2ec9b086079795c442636b55fb
 18 | 6f4922f45568161a8cdf4ad2299f6d23
 19 | 1f0e3dad99908345f7439f8ffabdffc4
 20 | 98f13708210194c475687be6106a3b84
(21 rows)

EXPLAIN (COSTS OFF) WITH cte1 AS (SELECT * FROM t1 WHERE f_leak(b)) SELECT * FROM cte1;

WITH cte1 AS (UPDATE t1 SET a = a + 1 RETURNING *) SELECT * FROM cte1; --fail
 a  |                b                 
----+----------------------------------
  1 | cfcd208495d565ef66e7dff9f98764da
  2 | c4ca4238a0b923820dcc509a6f75849b
  3 | c81e728d9d4c2f636f067f89cc14862c
  4 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  5 | a87ff679a2f3e71d9181a67b7542122c
  6 | e4da3b7fbbce2345d7772b0674a318d5
  7 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | 8f14e45fceea167a5a36dedd4bea2543
  9 | c9f0f895fb98ab9159f51fd0297e236d
 10 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 11 | d3d9446802a44259755d38e6d163e820
 12 | 6512bd43d9caa6e02c990b0a82652dca
 13 | c20ad4d76fe97759aa27a0c99bff6710
 14 | c51ce410c124a10e0db5e4b97fc2af39
 15 | aab3238922bcc25a6f606eb525ffdc56
 16 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 17 | c74d97b01eae257e44aa9d5bade97baf
 18 | 70efdf2ec9b086079795c442636b55fb
 19 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 1f0e3dad99908345f7439f8ffabdffc4
 21 | 98f13708210194c475687be6106a3b84
(21 rows)

-- not supported by kunlun: WITH cte1 AS (UPDATE t1 SET a = a RETURNING *) SELECT * FROM cte1; --ok
WITH cte1 AS (INSERT INTO t1 VALUES (21, 'Fail') RETURNING *) SELECT * FROM cte1; --fail
 a  |  b   
----+------
 21 | Fail
(1 row)

WITH cte1 AS (INSERT INTO t1 VALUES (20, 'Success') RETURNING *) SELECT * FROM cte1; --ok
 a  |    b    
----+---------
 20 | Success
(1 row)

--
-- Rename Policy
--
RESET SESSION AUTHORIZATION;
RESET
SELECT polname, relname
    FROM pg_policy pol
    JOIN pg_class pc ON (pc.oid = pol.polrelid)
    WHERE relname = 't1';
 polname | relname 
---------+---------
(0 rows)

SELECT polname, relname
    FROM pg_policy pol
    JOIN pg_class pc ON (pc.oid = pol.polrelid)
    WHERE relname = 't1';
 polname | relname 
---------+---------
(0 rows)

--
-- Check INSERT SELECT
--
SET SESSION AUTHORIZATION regress_rls_bob;
SET
CREATE TABLE t2 (a integer, b text);
CREATE TABLE
INSERT INTO t2 (SELECT * FROM t1);
INSERT 0 23
EXPLAIN (COSTS OFF) INSERT INTO t2 (SELECT * FROM t1);

SELECT * FROM t2;
 a  |                b                 
----+----------------------------------
  1 | cfcd208495d565ef66e7dff9f98764da
  2 | c4ca4238a0b923820dcc509a6f75849b
  3 | c81e728d9d4c2f636f067f89cc14862c
  4 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  5 | a87ff679a2f3e71d9181a67b7542122c
  6 | e4da3b7fbbce2345d7772b0674a318d5
  7 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | 8f14e45fceea167a5a36dedd4bea2543
  9 | c9f0f895fb98ab9159f51fd0297e236d
 10 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 11 | d3d9446802a44259755d38e6d163e820
 12 | 6512bd43d9caa6e02c990b0a82652dca
 13 | c20ad4d76fe97759aa27a0c99bff6710
 14 | c51ce410c124a10e0db5e4b97fc2af39
 15 | aab3238922bcc25a6f606eb525ffdc56
 16 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 17 | c74d97b01eae257e44aa9d5bade97baf
 18 | 70efdf2ec9b086079795c442636b55fb
 19 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 1f0e3dad99908345f7439f8ffabdffc4
 21 | 98f13708210194c475687be6106a3b84
 21 | Fail
 20 | Success
(23 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t2;

--
-- RLS with JOIN
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE blog (id integer, author text, post text);
CREATE TABLE
CREATE TABLE comment (blog_id integer, message text);
CREATE TABLE
GRANT ALL ON blog, comment TO regress_rls_bob;
GRANT
INSERT INTO blog VALUES
    (1, 'alice', 'blog #1'),
    (2, 'bob', 'blog #1'),
    (3, 'alice', 'blog #2'),
    (4, 'alice', 'blog #3'),
    (5, 'john', 'blog #1');
INSERT 0 5
INSERT INTO comment VALUES
    (1, 'cool blog'),
    (1, 'fun blog'),
    (3, 'crazy blog'),
    (5, 'what?'),
    (4, 'insane!'),
    (2, 'who did it?');
INSERT 0 6
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Check RLS JOIN with Non-RLS.
--SELECT id, author, message FROM blog JOIN comment ON id = blog_id;
SELECT id, author, message FROM blog JOIN comment ON id = blog_id order by id,author,message;
 id | author |   message   
----+--------+-------------
  1 | alice  | cool blog
  1 | alice  | fun blog
  2 | bob    | who did it?
  3 | alice  | crazy blog
  4 | alice  | insane!
  5 | john   | what?
(6 rows)

-- Check Non-RLS JOIN with RLS.
--SELECT id, author, message FROM comment JOIN blog ON id = blog_id;
SELECT id, author, message FROM comment JOIN blog ON id = blog_id order by id,author,message;
 id | author |   message   
----+--------+-------------
  1 | alice  | cool blog
  1 | alice  | fun blog
  2 | bob    | who did it?
  3 | alice  | crazy blog
  4 | alice  | insane!
  5 | john   | what?
(6 rows)

SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Check RLS JOIN RLS
--SELECT id, author, message FROM blog JOIN comment ON id = blog_id;
SELECT id, author, message FROM blog JOIN comment ON id = blog_id order by id,author,message;
 id | author |   message   
----+--------+-------------
  1 | alice  | cool blog
  1 | alice  | fun blog
  2 | bob    | who did it?
  3 | alice  | crazy blog
  4 | alice  | insane!
  5 | john   | what?
(6 rows)

--SELECT id, author, message FROM comment JOIN blog ON id = blog_id;
SELECT id, author, message FROM comment JOIN blog ON id = blog_id order by id,author,message;
 id | author |   message   
----+--------+-------------
  1 | alice  | cool blog
  1 | alice  | fun blog
  2 | bob    | who did it?
  3 | alice  | crazy blog
  4 | alice  | insane!
  5 | john   | what?
(6 rows)

SET SESSION AUTHORIZATION regress_rls_alice;
SET
DROP TABLE blog;
DROP TABLE
DROP TABLE comment;
DROP TABLE
--
-- Default Deny Policy
--
RESET SESSION AUTHORIZATION;
RESET
ALTER TABLE t1 OWNER TO regress_rls_alice;
ALTER TABLE
-- Check that default deny does not apply to superuser.
RESET SESSION AUTHORIZATION;
RESET
SELECT * FROM t1;
 a  |                b                 
----+----------------------------------
  1 | cfcd208495d565ef66e7dff9f98764da
  2 | c4ca4238a0b923820dcc509a6f75849b
  3 | c81e728d9d4c2f636f067f89cc14862c
  4 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  5 | a87ff679a2f3e71d9181a67b7542122c
  6 | e4da3b7fbbce2345d7772b0674a318d5
  7 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | 8f14e45fceea167a5a36dedd4bea2543
  9 | c9f0f895fb98ab9159f51fd0297e236d
 10 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 11 | d3d9446802a44259755d38e6d163e820
 12 | 6512bd43d9caa6e02c990b0a82652dca
 13 | c20ad4d76fe97759aa27a0c99bff6710
 14 | c51ce410c124a10e0db5e4b97fc2af39
 15 | aab3238922bcc25a6f606eb525ffdc56
 16 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 17 | c74d97b01eae257e44aa9d5bade97baf
 18 | 70efdf2ec9b086079795c442636b55fb
 19 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 1f0e3dad99908345f7439f8ffabdffc4
 21 | 98f13708210194c475687be6106a3b84
 21 | Fail
 20 | Success
(23 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

-- Check that default deny does not apply to table owner.
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM t1;
 a  |                b                 
----+----------------------------------
  1 | cfcd208495d565ef66e7dff9f98764da
  2 | c4ca4238a0b923820dcc509a6f75849b
  3 | c81e728d9d4c2f636f067f89cc14862c
  4 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  5 | a87ff679a2f3e71d9181a67b7542122c
  6 | e4da3b7fbbce2345d7772b0674a318d5
  7 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | 8f14e45fceea167a5a36dedd4bea2543
  9 | c9f0f895fb98ab9159f51fd0297e236d
 10 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 11 | d3d9446802a44259755d38e6d163e820
 12 | 6512bd43d9caa6e02c990b0a82652dca
 13 | c20ad4d76fe97759aa27a0c99bff6710
 14 | c51ce410c124a10e0db5e4b97fc2af39
 15 | aab3238922bcc25a6f606eb525ffdc56
 16 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 17 | c74d97b01eae257e44aa9d5bade97baf
 18 | 70efdf2ec9b086079795c442636b55fb
 19 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 1f0e3dad99908345f7439f8ffabdffc4
 21 | 98f13708210194c475687be6106a3b84
 21 | Fail
 20 | Success
(23 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

-- Check that default deny applies to non-owner/non-superuser when RLS on.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO ON;
SET
SELECT * FROM t1;
 a  |                b                 
----+----------------------------------
  1 | cfcd208495d565ef66e7dff9f98764da
  2 | c4ca4238a0b923820dcc509a6f75849b
  3 | c81e728d9d4c2f636f067f89cc14862c
  4 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  5 | a87ff679a2f3e71d9181a67b7542122c
  6 | e4da3b7fbbce2345d7772b0674a318d5
  7 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | 8f14e45fceea167a5a36dedd4bea2543
  9 | c9f0f895fb98ab9159f51fd0297e236d
 10 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 11 | d3d9446802a44259755d38e6d163e820
 12 | 6512bd43d9caa6e02c990b0a82652dca
 13 | c20ad4d76fe97759aa27a0c99bff6710
 14 | c51ce410c124a10e0db5e4b97fc2af39
 15 | aab3238922bcc25a6f606eb525ffdc56
 16 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 17 | c74d97b01eae257e44aa9d5bade97baf
 18 | 70efdf2ec9b086079795c442636b55fb
 19 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 1f0e3dad99908345f7439f8ffabdffc4
 21 | 98f13708210194c475687be6106a3b84
 21 | Fail
 20 | Success
(23 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM t1;
 a  |                b                 
----+----------------------------------
  1 | cfcd208495d565ef66e7dff9f98764da
  2 | c4ca4238a0b923820dcc509a6f75849b
  3 | c81e728d9d4c2f636f067f89cc14862c
  4 | eccbc87e4b5ce2fe28308fd9f2a7baf3
  5 | a87ff679a2f3e71d9181a67b7542122c
  6 | e4da3b7fbbce2345d7772b0674a318d5
  7 | 1679091c5a880faf6fb5e6087eb1b2dc
  8 | 8f14e45fceea167a5a36dedd4bea2543
  9 | c9f0f895fb98ab9159f51fd0297e236d
 10 | 45c48cce2e2d7fbdea1afc51c7c6ad26
 11 | d3d9446802a44259755d38e6d163e820
 12 | 6512bd43d9caa6e02c990b0a82652dca
 13 | c20ad4d76fe97759aa27a0c99bff6710
 14 | c51ce410c124a10e0db5e4b97fc2af39
 15 | aab3238922bcc25a6f606eb525ffdc56
 16 | 9bf31c7ff062936a96d3c8bd1f8f2ff3
 17 | c74d97b01eae257e44aa9d5bade97baf
 18 | 70efdf2ec9b086079795c442636b55fb
 19 | 6f4922f45568161a8cdf4ad2299f6d23
 20 | 1f0e3dad99908345f7439f8ffabdffc4
 21 | 98f13708210194c475687be6106a3b84
 21 | Fail
 20 | Success
(23 rows)

EXPLAIN (COSTS OFF) SELECT * FROM t1;

--
-- COPY TO/FROM
--
RESET SESSION AUTHORIZATION;
RESET
DROP TABLE copy_t CASCADE;
psql:sql/rowsecurity.sql:959: ERROR:  table "copy_t" does not exist
CREATE TABLE copy_t (a integer, b text);
CREATE TABLE
--CREATE POLICY p1 ON copy_t USING (a % 2 = 0);
--ALTER TABLE copy_t ENABLE ROW LEVEL SECURITY;
GRANT ALL ON copy_t TO regress_rls_bob, regress_rls_exempt_user;
GRANT
INSERT INTO copy_t (SELECT x, md5(x::text) FROM generate_series(0,10) x);
INSERT 0 11
-- Check COPY TO as Superuser/owner.
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ',';
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
SET row_security TO ON;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ',';
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
-- Check COPY TO as user with permissions.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO OFF;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --fail - would be affected by RLS
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
SET row_security TO ON;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --ok
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
-- Check COPY TO as user with permissions and BYPASSRLS
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --ok
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
SET row_security TO ON;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --ok
0,cfcd208495d565ef66e7dff9f98764da
1,c4ca4238a0b923820dcc509a6f75849b
2,c81e728d9d4c2f636f067f89cc14862c
3,eccbc87e4b5ce2fe28308fd9f2a7baf3
4,a87ff679a2f3e71d9181a67b7542122c
5,e4da3b7fbbce2345d7772b0674a318d5
6,1679091c5a880faf6fb5e6087eb1b2dc
7,8f14e45fceea167a5a36dedd4bea2543
8,c9f0f895fb98ab9159f51fd0297e236d
9,45c48cce2e2d7fbdea1afc51c7c6ad26
10,d3d9446802a44259755d38e6d163e820
-- Check COPY TO as user without permissions. SET row_security TO OFF;
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SET row_security TO OFF;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --fail - would be affected by RLS
psql:sql/rowsecurity.sql:993: ERROR:  permission denied for table copy_t
SET row_security TO ON;
SET
COPY (SELECT * FROM copy_t ORDER BY a ASC) TO STDOUT WITH DELIMITER ','; --fail - permission denied
psql:sql/rowsecurity.sql:995: ERROR:  permission denied for table copy_t
-- Check COPY relation TO; keep it just one row to avoid reordering issues
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO ON;
SET
CREATE TABLE copy_rel_to (a integer, b text);
CREATE TABLE
--CREATE POLICY p1 ON copy_rel_to USING (a % 2 = 0);
--ALTER TABLE copy_rel_to ENABLE ROW LEVEL SECURITY;
GRANT ALL ON copy_rel_to TO regress_rls_bob, regress_rls_exempt_user;
GRANT
INSERT INTO copy_rel_to VALUES (1, md5('1'));
INSERT 0 1
-- Check COPY TO as Superuser/owner.
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ',';
1,c4ca4238a0b923820dcc509a6f75849b
SET row_security TO ON;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ',';
1,c4ca4238a0b923820dcc509a6f75849b
-- Check COPY TO as user with permissions.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO OFF;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --fail - would be affected by RLS
1,c4ca4238a0b923820dcc509a6f75849b
SET row_security TO ON;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --ok
1,c4ca4238a0b923820dcc509a6f75849b
-- Check COPY TO as user with permissions and BYPASSRLS
SET SESSION AUTHORIZATION regress_rls_exempt_user;
SET
SET row_security TO OFF;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --ok
1,c4ca4238a0b923820dcc509a6f75849b
SET row_security TO ON;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --ok
1,c4ca4238a0b923820dcc509a6f75849b
-- Check COPY TO as user without permissions. SET row_security TO OFF;
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SET row_security TO OFF;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --fail - permission denied
psql:sql/rowsecurity.sql:1033: ERROR:  permission denied for table copy_rel_to
SET row_security TO ON;
SET
COPY copy_rel_to TO STDOUT WITH DELIMITER ','; --fail - permission denied
psql:sql/rowsecurity.sql:1035: ERROR:  permission denied for table copy_rel_to
-- Check COPY FROM as Superuser/owner.
RESET SESSION AUTHORIZATION;
RESET
SET row_security TO OFF;
SET
COPY copy_t FROM STDIN; --ok
COPY 4
SET row_security TO ON;
SET
COPY copy_t FROM STDIN; --ok
COPY 4
-- Check COPY FROM as user with permissions.
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SET row_security TO OFF;
SET
COPY copy_t FROM STDIN; --fail - would be affected by RLS.
psql:sql/rowsecurity.sql:1069: ERROR:  invalid input syntax for integer: "SET row_security TO ON;"
CONTEXT:  COPY copy_t, line 1, column a: "SET row_security TO ON;"
-- Check COPY FROM as user without permissions.
SET SESSION AUTHORIZATION regress_rls_carol;
SET
SET row_security TO OFF;
SET
COPY copy_t FROM STDIN; --fail - permission denied.
psql:sql/rowsecurity.sql:1074: ERROR:  permission denied for table copy_t
SET row_security TO ON;
SET
COPY copy_t FROM STDIN; --fail - permission denied.
psql:sql/rowsecurity.sql:1076: ERROR:  permission denied for table copy_t
RESET SESSION AUTHORIZATION;
RESET
DROP TABLE copy_t;
DROP TABLE
DROP TABLE copy_rel_to CASCADE;
DROP TABLE
-- Check WHERE CURRENT OF
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE current_check (currentid int, payload text, rlsuser text);
CREATE TABLE
GRANT ALL ON current_check TO PUBLIC;
GRANT
INSERT INTO current_check VALUES
    (1, 'abc', 'regress_rls_bob'),
    (2, 'bcd', 'regress_rls_bob'),
    (3, 'cde', 'regress_rls_bob'),
    (4, 'def', 'regress_rls_bob');
INSERT 0 4
SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Can SELECT even rows
SELECT * FROM current_check;
 currentid | payload |     rlsuser     
-----------+---------+-----------------
         1 | abc     | regress_rls_bob
         2 | bcd     | regress_rls_bob
         3 | cde     | regress_rls_bob
         4 | def     | regress_rls_bob
(4 rows)

-- Cannot UPDATE row 2
-- will crash here: UPDATE current_check SET payload = payload || '_new' WHERE currentid = 2 RETURNING *;
--
-- check pg_stats view filtering
--
SET row_security TO ON;
SET
SET SESSION AUTHORIZATION regress_rls_alice;
SET
-- Stats visible
SELECT row_security_active('current_check');
 row_security_active 
---------------------
 f
(1 row)

SELECT attname, most_common_vals FROM pg_stats
  WHERE tablename = 'current_check'
  ORDER BY 1;
 attname | most_common_vals 
---------+------------------
(0 rows)

SET SESSION AUTHORIZATION regress_rls_bob;
SET
-- Stats not visible
SELECT row_security_active('current_check');
 row_security_active 
---------------------
 f
(1 row)

SELECT attname, most_common_vals FROM pg_stats
  WHERE tablename = 'current_check'
  ORDER BY 1;
 attname | most_common_vals 
---------+------------------
(0 rows)

--
-- Shared Object Dependencies
--
RESET SESSION AUTHORIZATION;
RESET
--
-- Non-target relations are only subject to SELECT policies
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
CREATE TABLE r1 (a int);
CREATE TABLE
CREATE TABLE r2 (a int);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
INSERT INTO r2 VALUES (10), (20);
INSERT 0 2
GRANT ALL ON r1, r2 TO regress_rls_bob;
GRANT
SET SESSION AUTHORIZATION regress_rls_bob;
SET
SELECT * FROM r1;
 a  
----
 10
 20
(2 rows)

SELECT * FROM r2;
 a  
----
 10
 20
(2 rows)

-- r2 is read-only
INSERT INTO r2 VALUES (2); -- Not allowed
INSERT 0 1
-- No error (unable to see any rows to update)
UPDATE r2 SET a = 2 RETURNING *; -- Updates nothing
 a 
---
 2
 2
(2 rows)

UPDATE 2
DELETE FROM r2 RETURNING *; -- Deletes nothing
 a 
---
 2
 2
 2
(3 rows)

DELETE 3
-- r2 can be used as a non-target relation in DML
-- errors: INSERT INTO r1 SELECT a + 1 FROM r2 RETURNING *; -- OK
-- not support: UPDATE r1 SET a = r2.a + 2 FROM r2 WHERE r1.a = r2.a RETURNING *; -- OK
-- not support: DELETE FROM r1 USING r2 WHERE r1.a = r2.a + 2 RETURNING *; -- OK
SELECT * FROM r1;
 a  
----
 10
 20
(2 rows)

SELECT * FROM r2;
 a 
---
(0 rows)

SET SESSION AUTHORIZATION regress_rls_alice;
SET
DROP TABLE r1;
DROP TABLE
DROP TABLE r2;
DROP TABLE
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security = on;
SET
CREATE TABLE r1 (a int);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
-- No error, but no rows
TABLE r1;
 a  
----
 10
 20
(2 rows)

-- RLS error
INSERT INTO r1 VALUES (1);
INSERT 0 1
-- No error (unable to see any rows to update)
UPDATE r1 SET a = 1;
UPDATE 2
TABLE r1;
 a 
---
 1
 1
 1
(3 rows)

-- No error (unable to see any rows to delete)
DELETE FROM r1;
DELETE 3
TABLE r1;
 a 
---
(0 rows)

SET row_security = off;
SET
-- these all fail, would be affected by RLS
TABLE r1;
 a 
---
(0 rows)

UPDATE r1 SET a = 1;
UPDATE 0
DELETE FROM r1;
DELETE 0
DROP TABLE r1;
DROP TABLE
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security = on;
SET
CREATE TABLE r1 (a int PRIMARY KEY);
CREATE TABLE
CREATE TABLE r2 (a int);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
INSERT INTO r2 VALUES (10), (20);
INSERT 0 2
DELETE FROM r1;
DELETE 2
-- clean out r2 for INSERT test below
DELETE FROM r2;
DELETE 2
-- No rows seen
TABLE r1;
 a 
---
(0 rows)

-- No error, RI still sees that row exists in r1
INSERT INTO r2 VALUES (10);
INSERT 0 1
DROP TABLE r2;
DROP TABLE
DROP TABLE r1;
DROP TABLE
-- Ensure cascaded DELETE works
CREATE TABLE r1 (a int PRIMARY KEY);
CREATE TABLE
CREATE TABLE r2 (a int);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
INSERT INTO r2 VALUES (10), (20);
INSERT 0 2
-- Deletes all records from both
DELETE FROM r1;
DELETE 2
-- As owner, we now bypass RLS
-- verify no rows in r2 now
TABLE r2;
 a  
----
 10
 20
(2 rows)

DROP TABLE r2;
DROP TABLE
DROP TABLE r1;
DROP TABLE
-- Ensure cascaded UPDATE works
CREATE TABLE r1 (a int PRIMARY KEY);
CREATE TABLE
CREATE TABLE r2 (a int);
CREATE TABLE
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
INSERT INTO r2 VALUES (10), (20);
INSERT 0 2
-- Updates records in both
UPDATE r1 SET a = a+5;
UPDATE 2
-- As owner, we now bypass RLS
-- verify records in r2 updated
TABLE r2;
 a  
----
 10
 20
(2 rows)

DROP TABLE r2;
DROP TABLE
DROP TABLE r1;
DROP TABLE
--
-- Test INSERT+RETURNING applies SELECT policies as
-- WithCheckOptions (meaning an error is thrown)
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security = on;
SET
CREATE TABLE r1 (a int);
CREATE TABLE
-- Works fine
INSERT INTO r1 VALUES (10), (20);
INSERT 0 2
-- No error, but no rows
TABLE r1;
 a  
----
 10
 20
(2 rows)

SET row_security = off;
SET
-- fail, would be affected by RLS
TABLE r1;
 a  
----
 10
 20
(2 rows)

SET row_security = on;
SET
-- Error
INSERT INTO r1 VALUES (10), (20) RETURNING *;
 a  
----
 10
 20
(2 rows)

INSERT 0 2
DROP TABLE r1;
DROP TABLE
--
-- Test UPDATE+RETURNING applies SELECT policies as
-- WithCheckOptions (meaning an error is thrown)
--
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SET row_security = on;
SET
CREATE TABLE r1 (a int PRIMARY KEY);
CREATE TABLE
INSERT INTO r1 VALUES (10);
INSERT 0 1
-- Works fine
UPDATE r1 SET a = 30;
UPDATE 1
-- Show updated rows
TABLE r1;
 a  
----
 30
(1 row)

-- reset value in r1 for test with RETURNING
UPDATE r1 SET a = 10;
UPDATE 1
-- Verify row reset
TABLE r1;
 a  
----
 10
(1 row)

-- Error
UPDATE r1 SET a = 30 RETURNING *;
 a  
----
 30
(1 row)

UPDATE 1
-- UPDATE path of INSERT ... ON CONFLICT DO UPDATE should also error out
INSERT INTO r1 VALUES (10)
    ON CONFLICT (a) DO UPDATE SET a = 30 RETURNING *;
 a  
----
 10
(1 row)

INSERT 0 1
-- Should still error out without RETURNING (use of arbiter always requires
-- SELECT permissions)
INSERT INTO r1 VALUES (10)
    ON CONFLICT (a) DO UPDATE SET a = 30;
psql:sql/rowsecurity.sql:1291: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '30' for key 'r1.PRIMARY'.
INSERT INTO r1 VALUES (10)
    ON CONFLICT ON CONSTRAINT r1_pkey DO UPDATE SET a = 30;
psql:sql/rowsecurity.sql:1293: ERROR:  Kunlun-db: MySQL storage node (1, 1) returned error: 1062, Duplicate entry '30' for key 'r1.PRIMARY'.
	
DROP TABLE r1;
DROP TABLE
-- Check dependency handling
RESET SESSION AUTHORIZATION;
RESET
CREATE TABLE dep1 (c1 int);
CREATE TABLE
CREATE TABLE dep2 (c1 int);
CREATE TABLE
-- Should return one
SELECT count(*) = 1 FROM pg_depend
				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1')
					 AND refobjid = (SELECT oid FROM pg_class WHERE relname = 'dep2');
 ?column? 
----------
 f
(1 row)

-- Should return one
SELECT count(*) = 1 FROM pg_shdepend
				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1')
					 AND refobjid = (SELECT oid FROM pg_authid WHERE rolname = 'regress_rls_bob');
 ?column? 
----------
 f
(1 row)

-- Should return one
SELECT count(*) = 1 FROM pg_shdepend
				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1')
					 AND refobjid = (SELECT oid FROM pg_authid WHERE rolname = 'regress_rls_carol');
 ?column? 
----------
 f
(1 row)

-- Should return zero
SELECT count(*) = 0 FROM pg_depend
				   WHERE objid = (SELECT oid FROM pg_policy WHERE polname = 'dep_p1')
					 AND refobjid = (SELECT oid FROM pg_class WHERE relname = 'dep2');
 ?column? 
----------
 t
(1 row)

					 
RESET SESSION AUTHORIZATION;
RESET
CREATE ROLE regress_rls_dob_role1;
CREATE ROLE
CREATE ROLE regress_rls_dob_role2;
CREATE ROLE
CREATE TABLE dob_t1 (c1 int);
CREATE TABLE
CREATE TABLE dob_t2 (c1 int) PARTITION BY RANGE (c1);
CREATE TABLE
DROP USER regress_rls_dob_role1;
DROP ROLE
DROP USER regress_rls_dob_role2;
DROP ROLE
-- Bug #15708: view + table with RLS should check policies as view owner
CREATE TABLE ref_tbl (a int);
CREATE TABLE
INSERT INTO ref_tbl VALUES (1);
INSERT 0 1
CREATE TABLE rls_tbl (a int);
CREATE TABLE
INSERT INTO rls_tbl VALUES (10);
INSERT 0 1
GRANT SELECT ON ref_tbl TO regress_rls_bob;
GRANT
GRANT SELECT ON rls_tbl TO regress_rls_bob;
GRANT
CREATE VIEW rls_view AS SELECT * FROM rls_tbl;
CREATE VIEW
ALTER VIEW rls_view OWNER TO regress_rls_bob;
ALTER VIEW
GRANT SELECT ON rls_view TO regress_rls_alice;
GRANT
SET SESSION AUTHORIZATION regress_rls_alice;
SET
SELECT * FROM ref_tbl; -- Permission denied
psql:sql/rowsecurity.sql:1348: ERROR:  permission denied for table ref_tbl
SELECT * FROM rls_tbl; -- Permission denied
psql:sql/rowsecurity.sql:1349: ERROR:  permission denied for table rls_tbl
SELECT * FROM rls_view; -- OK
 a  
----
 10
(1 row)

RESET SESSION AUTHORIZATION;
RESET
DROP VIEW rls_view;
DROP VIEW
DROP TABLE rls_tbl;
DROP TABLE
DROP TABLE ref_tbl;
DROP TABLE
--
-- Clean up objects
--
RESET SESSION AUTHORIZATION;
RESET
drop table regress_rls_schema.t1 cascade;
DROP TABLE
drop table regress_rls_schema.blog;
psql:sql/rowsecurity.sql:1363: ERROR:  table "blog" does not exist
drop table regress_rls_schema.x1;
DROP TABLE
drop table regress_rls_schema.y1;
DROP TABLE
drop table regress_rls_schema.z1;
DROP TABLE
drop table regress_rls_schema.y2;
DROP TABLE
drop table regress_rls_schema.z2;
DROP TABLE
drop table regress_rls_schema.b1 cascade;
psql:sql/rowsecurity.sql:1369: NOTICE:  drop cascades to view bv1
DROP TABLE
drop table regress_rls_schema.s1 cascade;
DROP TABLE
drop table regress_rls_schema.s2 cascade;
psql:sql/rowsecurity.sql:1371: NOTICE:  drop cascades to view v2
DROP TABLE
drop table regress_rls_schema.rec1 cascade;
psql:sql/rowsecurity.sql:1372: NOTICE:  drop cascades to view rec1v
DROP TABLE
drop table regress_rls_schema.rec2 cascade;
psql:sql/rowsecurity.sql:1373: NOTICE:  drop cascades to view rec2v
DROP TABLE
drop table regress_rls_schema.part_document cascade;
DROP TABLE
drop table regress_rls_schema.uaccount cascade;
DROP TABLE
drop table regress_rls_schema.document cascade;
DROP TABLE
drop table regress_rls_schema.category cascade;
DROP TABLE
drop table regress_rls_schema.dependent cascade;
DROP TABLE
drop table regress_rls_schema.current_check;
DROP TABLE
drop table regress_rls_schema.rls_tbl cascade;
psql:sql/rowsecurity.sql:1380: ERROR:  table "rls_tbl" does not exist
drop function regress_rls_schema.op_leak(integer,integer) cascade;
psql:sql/rowsecurity.sql:1381: ERROR:  function regress_rls_schema.op_leak(integer, integer) does not exist
DROP USER regress_rls_alice;
DROP ROLE
drop table regress_rls_schema.dep1 cascade;
DROP TABLE
drop table regress_rls_schema.t2 cascade;
DROP TABLE
DROP USER regress_rls_bob;
DROP ROLE
DROP USER regress_rls_carol;
DROP ROLE
DROP USER regress_rls_dave;
DROP ROLE
DROP USER regress_rls_exempt_user;
DROP ROLE
DROP ROLE regress_rls_group1;
DROP ROLE
DROP ROLE regress_rls_group2;
DROP ROLE
drop table regress_rls_schema.dob_t1 cascade;
DROP TABLE
drop table regress_rls_schema.dob_t2 cascade;
DROP TABLE
drop table regress_rls_schema.dep2 cascade;
DROP TABLE
\set VERBOSITY terse \\ -- suppress cascade details
DROP SCHEMA regress_rls_schema CASCADE;
psql:sql/rowsecurity.sql:1398: NOTICE:  drop cascades to function f_leak(text)
DROP SCHEMA
\set VERBOSITY default
-- Arrange to have a few policies left over, for testing
-- pg_dump/pg_restore
CREATE SCHEMA regress_rls_schema;
CREATE SCHEMA
CREATE TABLE rls_tbl (c1 int);
CREATE TABLE
CREATE TABLE rls_tbl_force (c1 int);
CREATE TABLE
drop table rls_tbl;
DROP TABLE
drop table rls_tbl_force;
DROP TABLE
drop schema regress_rls_schema;
DROP SCHEMA
